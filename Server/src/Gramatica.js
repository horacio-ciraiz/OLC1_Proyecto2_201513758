/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[5,11],$V2=[1,26],$V3=[1,32],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,33],$V9=[1,38],$Va=[11,16,22,25,75,76,77,78],$Vb=[1,45],$Vc=[1,48],$Vd=[1,49],$Ve=[1,50],$Vf=[1,51],$Vg=[11,22],$Vh=[7,48],$Vi=[2,108],$Vj=[1,67],$Vk=[1,71],$Vl=[1,66],$Vm=[1,68],$Vn=[1,69],$Vo=[1,70],$Vp=[1,64],$Vq=[11,16,22,25,53,58,59,60,64,65,66,67,68,75,76,77,78],$Vr=[7,20,48],$Vs=[7,20,48,93,94,95],$Vt=[1,92],$Vu=[1,93],$Vv=[1,89],$Vw=[1,88],$Vx=[1,90],$Vy=[1,91],$Vz=[7,20,48,51,52,80,81,82,83,87,88,89,90,91,92,93,94,95],$VA=[1,119],$VB=[1,121],$VC=[20,48],$VD=[7,20,48,80,81,87,88,89,90,91,92,93,94,95],$VE=[7,20,48,80,81,82,83,87,88,89,90,91,92,93,94,95],$VF=[1,126],$VG=[1,151],$VH=[1,152],$VI=[1,155],$VJ=[1,154],$VK=[1,153],$VL=[1,156],$VM=[1,157],$VN=[1,148],$VO=[1,149],$VP=[1,150],$VQ=[16,22,25,53,58,59,60,64,65,66,67,68,75,76,77,78];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTACLASE":4,"EOF":5,"CLASE":6,"pcoma":7,"CLASS":8,"INTERFACE":9,"MAIN":10,"public":11,"static":12,"void":13,"main":14,"parentesisA":15,"string":16,"corcheteA":17,"corcheteC":18,"args":19,"parentesisC":20,"llaveA":21,"llaveC":22,"LISTAINSTRUCCIONES":23,"class":24,"identificador":25,"LISTACUERPOCLASS":26,"CUERPOCLASS":27,"METODOS":28,"FUNCIONES":29,"DEC":30,"EXP":31,"ASIGNACION":32,"TIPOVOID":33,"LISTAPARAMETROS":34,"interface":35,"LISTACUERPOINTERFACE":36,"CUERPOINTERFACE":37,"INSTRUCCIONES":38,"SENTENCIAS":39,"REPETICION":40,"CONTROL":41,"BREAK":42,"CONTINUE":43,"RETURN":44,"PRINT":45,"LLAMADA":46,"LISTAPARAMETROSVALOR":47,"coma":48,"PARAMETROSVALOR":49,"EXPRESIONRELACIONAL":50,"adicion":51,"sustraccion":52,"print":53,"EXPRESIONLOGICA":54,"FOR":55,"WHILE":56,"DOWHILE":57,"do":58,"while":59,"for":60,"IF":61,"ELSE":62,"ELSEIF":63,"if":64,"else":65,"break":66,"continue":67,"return":68,"igual":69,"TIPO":70,"LISTAIDENTIFICADORES":71,"LISTID":72,"PARAMETROS":73,"VOID":74,"int":75,"boolean":76,"double":77,"char":78,"EXPRESIONNUMERICA":79,"menos":80,"mas":81,"por":82,"dividido":83,"entero":84,"decimal":85,"cadena":86,"dobleigual":87,"notigual":88,"mayor":89,"mayorigual":90,"menor":91,"menorigual":92,"and":93,"or":94,"xor":95,"not":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"pcoma",11:"public",12:"static",13:"void",14:"main",15:"parentesisA",16:"string",17:"corcheteA",18:"corcheteC",19:"args",20:"parentesisC",21:"llaveA",22:"llaveC",24:"class",25:"identificador",35:"interface",48:"coma",51:"adicion",52:"sustraccion",53:"print",58:"do",59:"while",60:"for",64:"if",65:"else",66:"break",67:"continue",68:"return",69:"igual",75:"int",76:"boolean",77:"double",78:"char",80:"menos",81:"mas",82:"por",83:"dividido",84:"entero",85:"decimal",86:"cadena",87:"dobleigual",88:"notigual",89:"mayor",90:"mayorigual",91:"menor",92:"menorigual",93:"and",94:"or",95:"xor",96:"not"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[6,1],[6,1],[10,12],[10,13],[8,5],[8,6],[26,2],[26,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[29,7],[29,6],[28,8],[28,7],[28,9],[28,8],[9,5],[9,6],[36,2],[36,1],[37,1],[23,2],[23,1],[38,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[46,5],[46,4],[47,3],[47,1],[49,1],[31,3],[31,3],[45,5],[40,1],[40,1],[40,1],[57,8],[57,9],[56,6],[56,7],[55,9],[55,10],[41,1],[41,1],[41,1],[61,6],[61,7],[62,3],[62,4],[63,7],[63,8],[42,2],[43,2],[44,3],[32,4],[30,3],[71,3],[71,1],[72,3],[72,1],[34,3],[34,1],[73,2],[33,1],[33,1],[74,1],[70,1],[70,1],[70,1],[70,1],[70,1],[79,2],[79,3],[79,3],[79,3],[79,3],[79,2],[79,2],[79,3],[79,1],[79,1],[79,1],[79,1],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[50,1],[54,0],[54,3],[54,3],[54,3],[54,2],[54,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$= new Nodo("INICIO","");
								this.$.addHijos($$[$0-1]);
								return this.$;

						
break;
case 2:
 this.$ = new Nodo("LISTACLASE","");
								this.$.addHijos($$[$0-1]);	
								this.$.addHijos($$[$0]);																			
							
break;
case 3:
 this.$ = new Nodo("LISTACLASE","");
								this.$.addHijos($$[$0]);																				
							
break;
case 4:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 5: case 6:
 this.$ = new Nodo("TIPOCLASE","");
					this.$.addHijos($$[$0]);																			
				
break;
case 7:
 this.$ = new Nodo("MAIN","");
																								
																								
break;
case 8:
 this.$ = new Nodo("MAIN","");
																												this.$.addHijos($$[$0-1]);
																								
break;
case 9:
 this.$ = new Nodo("CLASS","");
											this.$.addHijos(new Nodo($$[$0-2],"identificador"));
											
break;
case 10:
 this.$ = new Nodo("CLASS","");
											this.$.addHijos(new Nodo($$[$0-3],"identificador"));
											this.$.addHijos($$[$0-1]);
											
break;
case 11:
 this.$ = new Nodo("LISTACUERPOCLASS","");
													this.$.addHijos($$[$0-1]);
													this.$.addHijos($$[$0]);
												
break;
case 12:
 this.$ = new Nodo("LISTACUERPOCLASS","");
													this.$.addHijos($$[$0]);
												
break;
case 13: case 15: case 16: case 17:
 this.$ = new Nodo("CUERPOCLASS","");
						this.$.addHijos($$[$0]);
					
break;
case 14:
 this.$ = new Nodo("CUERPOCLASS","");
						this.$.addHijos($$[$0]);
					  
break;
case 18:
 this.$ = new Nodo("CUERPOCLASS","");
						this.$.addHijos($$[$0]);				 //---------------------Funciones
			
break;
case 19:
 this.$ = new Nodo("FUNCIONES","");
																							this.$.addHijos($$[$0-5]);
																							this.$.addHijos(new Nodo($$[$0-4],"identificador"));
																							this.$.addHijos($$[$0-2]);
																							
break;
case 20:
 this.$ = new Nodo("FUNCIONES","");
																							this.$.addHijos($$[$0-4]);
																							this.$.addHijos(new Nodo($$[$0-3],"identificador"));
																							
break;
case 21:
 this.$ = new Nodo("METODOS","1");
																							this.$.addHijos($$[$0-6]);
																							this.$.addHijos(new Nodo($$[$0-5],"identificador"));
																							this.$.addHijos($$[$0-3]);
																							
break;
case 22:
 this.$ = new Nodo("METODOS","2");
																							this.$.addHijos($$[$0-5]);
																							this.$.addHijos(new Nodo($$[$0-4],"identificador"));
																							
break;
case 23:
 this.$ = new Nodo("METODOS","3");
																													this.$.addHijos($$[$0-7]);
																													this.$.addHijos(new Nodo($$[$0-6],"identificador"));
																													this.$.addHijos($$[$0-4]);
																													this.$.addHijos($$[$0-1]);
																													
break;
case 24:
 this.$ = new Nodo("METODOS","4");
																													this.$.addHijos($$[$0-6]);
																													this.$.addHijos(new Nodo($$[$0-5],"identificador"));
																													this.$.addHijos($$[$0-1]);
																													
break;
case 25:
 this.$ = new Nodo("INTERFACE","");
													this.$.addHijos(new Nodo($$[$0-2],"identificador"));
													
break;
case 26:
 this.$ = new Nodo("INTERFACE","");
																	this.$.addHijos(new Nodo($$[$0-3],"identificador"));
																	this.$.addHijos($$[$0-1]);
																	
break;
case 27:
 this.$ = new Nodo("LISTACUERPOINTERFACE","");
																	this.$.addHijos($$[$0-1]);
																	this.$.addHijos($$[$0]);
																	
break;
case 28:
 this.$ = new Nodo("LISTACUERPOINTERFACE","");
																	this.$.addHijos($$[$0]);
																	
																	
break;
case 29:
 this.$ = new Nodo("CUERPOINTERFACE","");
							this.$.addHijos($$[$0]);
						
break;
case 30:
 this.$ = new Nodo("LISTAINSTRUCCIONES","");
													this.$.addHijos($$[$0-1]);
													this.$.addHijos($$[$0]);	
													
break;
case 31:
 this.$ = new Nodo("LISTAINSTRUCCIONES","");
													this.$.addHijos($$[$0]);
													
break;
case 32:
 this.$ = new Nodo("INSTRUCCIONES","");
							this.$.addHijos($$[$0]);	
							
break;
case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42:
 this.$ = new Nodo("SENTENCIA","");
						this.$.addHijos($$[$0]);	
						
break;
case 43:
 this.$ = new Nodo("LLAMADA","");
																 this.$.addHijos(new Nodo($$[$0-4],"identificador")); 
																 this.$.addHijos($$[$0-2]);	
																
break;
case 44:
 this.$ = new Nodo("LLAMADA","");
																 this.$.addHijos(new Nodo($$[$0-3],"identificador")); 
																 
																
break;
case 45:
	 this.$ = new Nodo("LISTAPARAMETROSVALOR","");
																 this.$.addHijos($$[$0-2]); 
																 this.$.addHijos($$[$0]); 
																
break;
case 46:
	 this.$ = new Nodo("LISTAPARAMETROSVALOR","");
																 this.$.addHijos($$[$0]); 
																
break;
case 47:
	 this.$ = new Nodo("PARAMETROSVALOR","");
																 this.$.addHijos($$[$0]); 
																
break;
case 48:
 this.$ = new Nodo("AUM_DEC","");
								this.$.addHijos(new Nodo($$[$0-2],"identificador")); 
								this.$.addHijos(new Nodo($$[$0-1],"sutraccion")); 	
								
break;
case 49:
 this.$ = new Nodo("AUM_DEC","");
								this.$.addHijos(new Nodo($$[$0-2],"identificador")); 
								this.$.addHijos(new Nodo($$[$0-1],"sustraccion")); 
								
break;
case 50:
 this.$ = new Nodo("PRINT","");
																this.$.addHijos($$[$0-2]);	
															
break;
case 51: case 52: case 53:
 this.$ = new Nodo("REPETICION","");
					this.$.addHijos($$[$0]);	
				
break;
case 54:
 this.$ = new Nodo("DOWHILE","");
																				this.$.addHijos($$[$0-2]);	
																			
break;
case 55:
 this.$ = new Nodo("DOWHILE","");
																								this.$.addHijos($$[$0-6]);
																								this.$.addHijos($$[$0-2]);	
																								
break;
case 56:
 this.$ = new Nodo("WHILE","");
																				this.$.addHijos($$[$0-3]);	
																			
break;
case 57:
 this.$ = new Nodo("WHILE","");
																				this.$.addHijos($$[$0-4]);	
																				this.$.addHijos($$[$0-1]);
																			
break;
case 58:
 this.$ = new Nodo("FOR","");
																								this.$.addHijos($$[$0-6]);
																								this.$.addHijos($$[$0-5]);
																								this.$.addHijos($$[$0-3]);
																								
break;
case 59:
 this.$ = new Nodo("FOR","");
																											this.$.addHijos($$[$0-7]);
																											this.$.addHijos($$[$0-6]);
																											this.$.addHijos($$[$0-4]);
																											this.$.addHijos($$[$0-1])
																											
break;
case 60: case 61: case 62:
 this.$ = new Nodo("CONTROL","");
								this.$.addHijos($$[$0]);
								
break;
case 63:
 this.$ = new Nodo("IF","");
																this.$.addHijos($$[$0-3]);
																
break;
case 64:
 this.$ = new Nodo("IF","");
																				this.$.addHijos($$[$0-4]);
																				this.$.addHijos($$[$0-1]);
																				
break;
case 65:
 this.$ = new Nodo("ELSE","");
											
											
break;
case 66:
 this.$ = new Nodo("ELSE","");
											this.$.addHijos($$[$0-1]);
											
break;
case 67:
 this.$ = new Nodo("ELSEIF","");
																			this.$.addHijos($$[$0-3]);
																		
break;
case 68:
 this.$ = new Nodo("ELSEIF","");
																							this.$.addHijos($$[$0-4]);
																							this.$.addHijos($$[$0-1]);
																							
break;
case 69:
 this.$ = new Nodo("BREAK","");
																//this.$.addHijos(new Nodo($$[$0-1],"break"));
																
break;
case 70:
 this.$ = new Nodo("CONTINUE","");
																//this.$.addHijos(new Nodo($$[$0-1],"continue"));
																
break;
case 71:
 this.$ = new Nodo("RETURN","");
																  this.$.addHijos($$[$0-1]);
																
break;
case 72:
 this.$ = new Nodo("ASIGNACION","");
																	this.$.addHijos(new Nodo($$[$0-3],"identificador")); 
																this.$.addHijos($$[$0-1]);
																
break;
case 73:
 this.$ = new Nodo("DEC","");
                            									this.$.addHijos($$[$0-2]);
																this.$.addHijos($$[$0-1]);
																
break;
case 74:
 this.$ = new Nodo("LISTAIDENTIFICADORES","");
                            									this.$.addHijos($$[$0-2]);
																this.$.addHijos($$[$0]);
																
break;
case 75:
 this.$ = new Nodo("LISTAIDENTIFICADORES","");
																this.$.addHijos($$[$0]);
                        										
break;
case 76:
 this.$ = new Nodo("LISTID","");
                            									this.$.addHijos(new Nodo($$[$0-2],"identificador")); 
																this.$.addHijos($$[$0]);
																
break;
case 77:
 this.$ = new Nodo("LISTID","");
                            									this.$.addHijos(new Nodo($$[$0],"identificador")); 
																
break;
case 78:
 this.$ = new Nodo("LISTAPARAMETROS","");
                            							this.$.addHijos($$[$0-2]);
														this.$.addHijos($$[$0]); 
													
break;
case 79:
 this.$ = new Nodo("LISTAPARAMETROS","");
                            							this.$.addHijos($$[$0]);
                            							
													
break;
case 80:
 this.$ = new Nodo("PARAMETROS","");
                            							this.$.addHijos($$[$0-1]);
                            							this.$.addHijos(new Nodo($$[$0],"identificador")); 
													
break;
case 81: case 82:
 this.$ = new Nodo("TIPOVOID","");
				this.$.addHijos($$[$0]);
			
break;
case 83:
 this.$ = new Nodo("VOID","");
								this.$.addHijos(new Nodo($$[$0],"void")); 	
                        	
break;
case 84:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"int")); 	
                        	
break;
case 85:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"boolean")); 	
                        	
break;
case 86:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"double")); 	
                        	
break;
case 87:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"string")); 	
                        	
break;
case 88:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"char")); 	
                        	
break;
case 89:
 this.$ = new Nodo("EXP","INICIO");
													  this.$.addHijos(new Nodo($$[$0-1],"menos")); 
                            							this.$.addHijos($$[$0]);
													
break;
case 90:
 this.$ = new Nodo("EXP","MEDIO");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"mas")); 
														this.$.addHijos($$[$0]);
													
break;
case 91:
 this.$ = new Nodo("EXP","MEDIO");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"menos")); 
														this.$.addHijos($$[$0]);
													
break;
case 92:
 this.$ = new Nodo("EXP","MEDIO");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"multiplicacion")); 
														this.$.addHijos($$[$0]);
													
break;
case 93:
 this.$ = new Nodo("EXP","MEDIO");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"division")); 
														this.$.addHijos($$[$0]);
													
break;
case 94:
 this.$ = new Nodo("EXP","FINAL");
                            							this.$.addHijos($$[$0-1]);
                            							this.$.addHijos(new Nodo($$[$0],"adicion")); 
													
break;
case 95:
 this.$ = new Nodo("EXP","FINAL");
                            							this.$.addHijos($$[$0-1]);
                            							this.$.addHijos(new Nodo($$[$0],"sustraccion")); 
													
break;
case 96:
 this.$ = new Nodo("EXP","PAREN");
														this.$.addHijos(new Nodo($$[$0-2],"parentesisA")); 
                            							this.$.addHijos($$[$0-1]); 
														this.$.addHijos(new Nodo($$[$0],"parentesisC"));
                        							
break;
case 97:
 this.$ = new Nodo("EXP","TERM");
															this.$.addHijos(new Nodo($$[$0],"entero")); 	
                        							
break;
case 98:
 this.$ = new Nodo("EXP","TERM");
															this.$.addHijos(new Nodo($$[$0],"decimal")); 	
                        							
break;
case 99:
 this.$ = new Nodo("EXP","TERM");
															this.$.addHijos(new Nodo($$[$0],"cadena")); 	
                        							
break;
case 100:
 this.$ = new Nodo("EXP","TERM");
															this.$.addHijos(new Nodo($$[$0],"identificador")); 	
                        							
break;
case 101: case 106:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"dobleigual")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 102:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"not igual")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 103:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"mayor")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 104:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"mayorigual")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 105:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"menor")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 107:
 this.$ = new Nodo("EXP","UNICO");
															this.$.addHijos($$[$0]); 
															
															
                        									
break;
case 109:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"and")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 110:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"or")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 111:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"xor")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 112:
 this.$ = new Nodo("EXP","INICIO");
															this.$.addHijos(new Nodo($$[$0-1],"not")); 
															this.$.addHijos($$[$0]); 
															
                        									
break;
case 113:
 this.$ = new Nodo("EXP","UNICO");
															this.$.addHijos($$[$0]); 
															
                        									
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,8:5,9:6,11:$V0},{1:[3]},{5:[1,8],6:9,8:5,9:6,11:$V0},o($V1,[2,3]),{7:[1,10]},o($V1,[2,5]),o($V1,[2,6]),{24:[1,11],35:[1,12]},{1:[2,1]},o($V1,[2,2]),o($V1,[2,4]),{25:[1,13]},{25:[1,14]},{21:[1,15]},{21:[1,16]},{10:24,11:$V2,16:$V3,22:[1,17],25:$V4,26:18,27:19,28:20,29:21,30:22,31:23,32:25,70:27,75:$V5,76:$V6,77:$V7,78:$V8},{11:$V9,22:[1,34],29:37,36:35,37:36},o($V1,[2,9]),{10:24,11:$V2,16:$V3,22:[1,39],25:$V4,27:40,28:20,29:21,30:22,31:23,32:25,70:27,75:$V5,76:$V6,77:$V7,78:$V8},o($Va,[2,12]),o($Va,[2,13]),o($Va,[2,14]),o($Va,[2,15]),o($Va,[2,16]),o($Va,[2,17]),o($Va,[2,18]),{12:[1,42],13:$Vb,16:$V3,33:41,70:44,74:43,75:$V5,76:$V6,77:$V7,78:$V8},{25:$Vc,71:46,72:47},{51:$Vd,52:$Ve,69:$Vf},{25:[2,84]},{25:[2,85]},{25:[2,86]},{25:[2,87]},{25:[2,88]},o($V1,[2,25]),{11:$V9,22:[1,52],29:37,37:53},o($Vg,[2,28]),o($Vg,[2,29]),{13:$Vb,16:$V3,33:54,70:44,74:43,75:$V5,76:$V6,77:$V7,78:$V8},o($V1,[2,10]),o($Va,[2,11]),{25:[1,55]},{13:[1,56]},{25:[2,81]},{25:[2,82]},{25:[2,83]},{7:[1,57],48:[1,58]},o($Vh,[2,75]),o($Vh,[2,77],{69:[1,59]}),{7:[1,60]},{7:[1,61]},{7:$Vi,15:$Vj,25:$Vk,50:63,54:62,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo,96:$Vp},o($V1,[2,26]),o($Vg,[2,27]),{25:[1,72]},{15:[1,73]},{14:[1,74]},o([7,11,15,16,22,25,53,58,59,60,64,65,66,67,68,75,76,77,78,80,84,85,86,96],[2,73]),{25:$Vc,72:75},o($Vh,$Vi,{50:63,79:65,54:76,15:$Vj,25:$Vk,80:$Vl,84:$Vm,85:$Vn,86:$Vo,96:$Vp}),o($Vq,[2,48]),o($Vq,[2,49]),{7:[1,77]},o($Vr,[2,113],{93:[1,78],94:[1,79],95:[1,80]}),{15:$Vj,25:$Vk,50:81,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo},o($Vs,[2,107],{51:$Vt,52:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,87:[1,82],88:[1,83],89:[1,84],90:[1,85],91:[1,86],92:[1,87]}),{15:$Vj,25:$Vk,79:94,80:$Vl,84:$Vm,85:$Vn,86:$Vo},{15:$Vj,25:$Vk,79:95,80:$Vl,84:$Vm,85:$Vn,86:$Vo},o($Vz,[2,97]),o($Vz,[2,98]),o($Vz,[2,99]),o($Vz,[2,100]),{15:[1,96]},{16:$V3,20:[1,98],34:97,70:100,73:99,75:$V5,76:$V6,77:$V7,78:$V8},{15:[1,101]},o($Vh,[2,74]),o($Vh,[2,76]),o($Vq,[2,72]),{15:$Vj,25:$Vk,50:102,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo},{15:$Vj,25:$Vk,50:103,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo},{15:$Vj,25:$Vk,50:104,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo},o($Vr,[2,112]),{15:$Vj,25:$Vk,79:105,80:$Vl,84:$Vm,85:$Vn,86:$Vo},{15:$Vj,25:$Vk,79:106,80:$Vl,84:$Vm,85:$Vn,86:$Vo},{15:$Vj,25:$Vk,79:107,80:$Vl,84:$Vm,85:$Vn,86:$Vo},{15:$Vj,25:$Vk,79:108,80:$Vl,84:$Vm,85:$Vn,86:$Vo},{15:$Vj,25:$Vk,79:109,80:$Vl,84:$Vm,85:$Vn,86:$Vo},{15:$Vj,25:$Vk,79:110,80:$Vl,84:$Vm,85:$Vn,86:$Vo},{15:$Vj,25:$Vk,79:111,80:$Vl,84:$Vm,85:$Vn,86:$Vo},{15:$Vj,25:$Vk,79:112,80:$Vl,84:$Vm,85:$Vn,86:$Vo},{15:$Vj,25:$Vk,79:113,80:$Vl,84:$Vm,85:$Vn,86:$Vo},{15:$Vj,25:$Vk,79:114,80:$Vl,84:$Vm,85:$Vn,86:$Vo},o($Vz,[2,94]),o($Vz,[2,95]),o($Vz,[2,89]),{20:[1,115],51:$Vt,52:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy},{16:$V3,20:[1,117],34:116,70:100,73:99,75:$V5,76:$V6,77:$V7,78:$V8},{20:[1,118],48:$VA},{7:$VB,21:[1,120]},o($VC,[2,79]),{25:[1,122]},{16:[1,123]},o($Vr,[2,109]),o($Vr,[2,110]),o($Vr,[2,111]),o($Vs,[2,101],{51:$Vt,52:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy}),o($Vs,[2,102],{51:$Vt,52:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy}),o($Vs,[2,103],{51:$Vt,52:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy}),o($Vs,[2,104],{51:$Vt,52:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy}),o($Vs,[2,105],{51:$Vt,52:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy}),o($Vs,[2,106],{51:$Vt,52:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy}),o($VD,[2,90],{51:$Vt,52:$Vu,82:$Vx,83:$Vy}),o($VD,[2,91],{51:$Vt,52:$Vu,82:$Vx,83:$Vy}),o($VE,[2,92],{51:$Vt,52:$Vu}),o($VE,[2,93],{51:$Vt,52:$Vu}),o($Vz,[2,96]),{20:[1,124],48:$VA},{7:$VB},{7:$VF,21:[1,125]},{16:$V3,70:100,73:127,75:$V5,76:$V6,77:$V7,78:$V8},{16:$V3,22:[1,128],23:129,25:$VG,30:137,31:140,32:138,38:130,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},o($Va,[2,20]),o($VC,[2,80]),{17:[1,158]},{7:$VF},{16:$V3,22:[1,159],23:160,25:$VG,30:137,31:140,32:138,38:130,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},o($Va,[2,19]),o($VC,[2,78]),o($Va,[2,22]),{16:$V3,22:[1,161],25:$VG,30:137,31:140,32:138,38:162,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},o($VQ,[2,31]),o($VQ,[2,32]),o($VQ,[2,33]),o($VQ,[2,34]),o($VQ,[2,35]),o($VQ,[2,36]),o($VQ,[2,37]),o($VQ,[2,38]),o($VQ,[2,39]),o($VQ,[2,40]),o($VQ,[2,41]),o($VQ,[2,42]),o($VQ,[2,51]),o($VQ,[2,52]),o($VQ,[2,53]),o($VQ,[2,60]),o($VQ,[2,61]),o($VQ,[2,62]),{7:[1,163]},{7:[1,164]},{7:$Vi,15:$Vj,25:$Vk,50:63,54:165,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo,96:$Vp},{15:[1,166],51:$Vd,52:$Ve,69:$Vf},{15:[1,167]},{15:[1,168]},{15:[1,169]},{21:[1,170]},{15:[1,171]},{21:[1,172],64:[1,173]},{18:[1,174]},o($Va,[2,21]),{16:$V3,22:[1,175],25:$VG,30:137,31:140,32:138,38:162,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},o($Va,[2,24]),o($VQ,[2,30]),o($VQ,[2,69]),o($VQ,[2,70]),{7:[1,176]},{15:$Vj,20:[1,178],25:$Vk,47:177,49:179,50:180,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo},{15:$Vj,20:$Vi,25:$Vk,50:63,54:181,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo,96:$Vp},{16:$V3,30:182,70:27,75:$V5,76:$V6,77:$V7,78:$V8},{15:$Vj,20:$Vi,25:$Vk,50:63,54:183,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo,96:$Vp},{16:$V3,22:[1,184],23:185,25:$VG,30:137,31:140,32:138,38:130,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},{15:$Vj,20:$Vi,25:$Vk,50:63,54:186,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo,96:$Vp},{16:$V3,22:[1,187],23:188,25:$VG,30:137,31:140,32:138,38:130,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},{15:[1,189]},{19:[1,190]},o($Va,[2,23]),o($VQ,[2,71]),{20:[1,191],48:[1,192]},{7:[1,193]},o($VC,[2,46]),o($VC,[2,47]),{20:[1,194]},{7:$Vi,15:$Vj,25:$Vk,50:63,54:195,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo,96:$Vp},{20:[1,196]},{59:[1,197]},{16:$V3,22:[1,198],25:$VG,30:137,31:140,32:138,38:162,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},{20:[1,199]},o($VQ,[2,65]),{16:$V3,22:[1,200],25:$VG,30:137,31:140,32:138,38:162,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},{15:$Vj,20:$Vi,25:$Vk,50:63,54:201,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo,96:$Vp},{20:[1,202]},{7:[1,203]},{15:$Vj,25:$Vk,49:204,50:180,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo},o($VQ,[2,44]),{7:[1,205]},{7:[1,206]},{21:[1,207]},{15:[1,208]},{59:[1,209]},{21:[1,210]},o($VQ,[2,66]),{20:[1,211]},{21:[1,212]},o($VQ,[2,43]),o($VC,[2,45]),o($VQ,[2,50]),{15:$Vj,20:$Vi,25:$Vk,50:63,54:213,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo,96:$Vp},{16:$V3,22:[1,214],23:215,25:$VG,30:137,31:140,32:138,38:130,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},{15:$Vj,20:$Vi,25:$Vk,50:63,54:216,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo,96:$Vp},{15:[1,217]},{16:$V3,22:[1,218],23:219,25:$VG,30:137,31:140,32:138,38:130,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},{21:[1,220]},{16:$V3,22:[1,221],23:222,25:$VG,30:137,31:140,32:138,38:130,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},{20:[1,223]},o($VQ,[2,56]),{16:$V3,22:[1,224],25:$VG,30:137,31:140,32:138,38:162,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},{20:[1,225]},{15:$Vj,20:$Vi,25:$Vk,50:63,54:226,79:65,80:$Vl,84:$Vm,85:$Vn,86:$Vo,96:$Vp},o($VQ,[2,63]),{16:$V3,22:[1,227],25:$VG,30:137,31:140,32:138,38:162,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},{16:$V3,22:[1,228],23:229,25:$VG,30:137,31:140,32:138,38:130,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},o($Va,[2,7]),{16:$V3,22:[1,230],25:$VG,30:137,31:140,32:138,38:162,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},{21:[1,231]},o($VQ,[2,57]),{7:[1,232]},{20:[1,233]},o($VQ,[2,64]),o($VQ,[2,67]),{16:$V3,22:[1,234],25:$VG,30:137,31:140,32:138,38:162,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},o($Va,[2,8]),{16:$V3,22:[1,235],23:236,25:$VG,30:137,31:140,32:138,38:130,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},o($VQ,[2,54]),{7:[1,237]},o($VQ,[2,68]),o($VQ,[2,58]),{16:$V3,22:[1,238],25:$VG,30:137,31:140,32:138,38:162,39:131,40:132,41:133,42:134,43:135,44:136,45:139,46:141,53:$VH,55:142,56:143,57:144,58:$VI,59:$VJ,60:$VK,61:145,62:146,63:147,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:27,75:$V5,76:$V6,77:$V7,78:$V8},o($VQ,[2,55]),o($VQ,[2,59])],
defaultActions: {8:[2,1],29:[2,84],30:[2,85],31:[2,86],32:[2,87],33:[2,88],43:[2,81],44:[2,82],45:[2,83]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	 const Nodo = require('./NodoAST');
	 
 /* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple l√≠nea
break;
case 1:// comentario multiple l√≠neas
break;
case 2:return "sustraccion";
break;
case 3:return "adicion";
break;
case 4:return 48;
break;
case 5:return 7;
break;
case 6:return 15;
break;
case 7:return 20;
break;
case 8:return 21;
break;
case 9:return 22;
break;
case 10:return 17;
break;
case 11:return 18;
break;
case 12:return 87;
break;
case 13:return 90;
break;
case 14:return 92;
break;
case 15:return 89;
break;
case 16:return 91;
break;
case 17:return "notigual";
break;
case 18:return "mas";
break;
case 19:return "menos";
break;
case 20:return "por";
break;
case 21:return "dividido";
break;
case 22:return "igual";
break;
case 23:return 93;
break;
case 24:return 94;
break;
case 25:return 96;
break;
case 26:return "xor";
break;
case 27:return 13;
break;
case 28:return 12;
break;
case 29:return 35
break;
case 30:return 14;
break;
case 31:return 53;
break;
case 32:return 53;
break;
case 33:return "args";
break;
case 34:return "public";
break;
case 35:return "class";
break;
case 36:return 60;
break;
case 37:return 59;
break;
case 38:return 58;
break;
case 39:return 64;
break;
case 40:return 65;
break;
case 41:return 66;
break;
case 42:return 67;
break;
case 43:return 68;
break;
case 44:return 76;
break;
case 45:return 75;
break;
case 46:return 77;
break;
case 47:return 16;
break;
case 48:return 78;
break;
case 49:
break;
case 50:
break;
case 51:
break;
case 52:return 25;
break;
case 53:return 85;
break;
case 54:return 84;
break;
case 55: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 86; 
break;
case 56:return 5;
break;
case 57: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:void\b)/i,/^(?:static\b)/i,/^(?:interface\b)/i,/^(?:main\b)/i,/^(?:System\.out\.println\b)/i,/^(?:System\.out\.print\b)/i,/^(?:args\b)/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:boolean\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:String\b)/i,/^(?:char\b)/i,/^(?:[\s]+)/i,/^(?:[\r\t]+)/i,/^(?:\n)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}