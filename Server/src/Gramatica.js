/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[5,10],$V2=[1,10],$V3=[2,5,10],$V4=[1,29],$V5=[1,35],$V6=[1,31],$V7=[1,32],$V8=[1,33],$V9=[1,34],$Va=[1,36],$Vb=[1,42],$Vc=[2,10,15,21,25,76,77,78,79],$Vd=[1,50],$Ve=[1,54],$Vf=[1,55],$Vg=[1,56],$Vh=[1,57],$Vi=[2,25],$Vj=[1,59],$Vk=[10,21],$Vl=[1,66],$Vm=[35,49],$Vn=[1,79],$Vo=[1,83],$Vp=[2,126],$Vq=[1,78],$Vr=[1,80],$Vs=[1,81],$Vt=[1,82],$Vu=[1,76],$Vv=[1,84],$Vw=[2,10,14,15,21,25,35,54,59,60,61,65,66,67,68,69,76,77,78,79,81,85,86,87,97],$Vx=[2,10,15,21,25,54,59,60,61,65,66,67,68,69,76,77,78,79],$Vy=[19,35,49],$Vz=[19,35,49,94,95,96],$VA=[1,105],$VB=[1,106],$VC=[1,102],$VD=[1,101],$VE=[1,103],$VF=[1,104],$VG=[19,35,49,52,53,81,82,83,84,88,89,90,91,92,93,94,95,96],$VH=[1,133],$VI=[1,135],$VJ=[19,49],$VK=[19,35,49,81,82,88,89,90,91,92,93,94,95,96],$VL=[19,35,49,81,82,83,84,88,89,90,91,92,93,94,95,96],$VM=[1,141],$VN=[1,166],$VO=[1,167],$VP=[1,171],$VQ=[1,170],$VR=[1,169],$VS=[1,172],$VT=[1,173],$VU=[1,163],$VV=[1,164],$VW=[1,165],$VX=[2,15,21,25,54,59,60,61,65,66,67,68,69,76,77,78,79];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTACLASE":4,"EOF":5,"CLASE":6,"CLASS":7,"INTERFACE":8,"MAIN":9,"public":10,"static":11,"void":12,"main":13,"parentesisA":14,"string":15,"corcheteA":16,"corcheteC":17,"args":18,"parentesisC":19,"llaveA":20,"llaveC":21,"LISTAINSTRUCCIONES":22,"ERROR":23,"class":24,"identificador":25,"LISTACUERPOCLASS":26,"CUERPOCLASS":27,"METODOS":28,"FUNCIONES":29,"DEC":30,"EXP":31,"ASIGNACION":32,"TIPOVOID":33,"LISTAPARAMETROS":34,"pcoma":35,"interface":36,"LISTACUERPOINTERFACE":37,"CUERPOINTERFACE":38,"INSTRUCCIONES":39,"SENTENCIAS":40,"REPETICION":41,"CONTROL":42,"BREAK":43,"CONTINUE":44,"RETURN":45,"PRINT":46,"LLAMADA":47,"LISTAPARAMETROSVALOR":48,"coma":49,"PARAMETROSVALOR":50,"EXPRESIONRELACIONAL":51,"adicion":52,"sustraccion":53,"print":54,"EXPRESIONLOGICA":55,"FOR":56,"WHILE":57,"DOWHILE":58,"do":59,"while":60,"for":61,"IF":62,"ELSE":63,"ELSEIF":64,"if":65,"else":66,"break":67,"continue":68,"return":69,"igual":70,"TIPO":71,"LISTAIDENTIFICADORES":72,"LISTID":73,"PARAMETROS":74,"VOID":75,"int":76,"boolean":77,"double":78,"char":79,"EXPRESIONNUMERICA":80,"menos":81,"mas":82,"por":83,"dividido":84,"entero":85,"decimal":86,"cadena":87,"dobleigual":88,"notigual":89,"mayor":90,"mayorigual":91,"menor":92,"menorigual":93,"and":94,"or":95,"xor":96,"not":97,"SIMBOLO":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"public",11:"static",12:"void",13:"main",14:"parentesisA",15:"string",16:"corcheteA",17:"corcheteC",18:"args",19:"parentesisC",20:"llaveA",21:"llaveC",24:"class",25:"identificador",35:"pcoma",36:"interface",49:"coma",52:"adicion",53:"sustraccion",54:"print",59:"do",60:"while",61:"for",65:"if",66:"else",67:"break",68:"continue",69:"return",70:"igual",76:"int",77:"boolean",78:"double",79:"char",81:"menos",82:"mas",83:"por",84:"dividido",85:"entero",86:"decimal",87:"cadena",88:"dobleigual",89:"notigual",90:"mayor",91:"mayorigual",92:"menor",93:"menorigual",94:"and",95:"or",96:"xor",97:"not"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[9,12],[9,13],[9,6],[7,5],[7,6],[7,3],[26,2],[26,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[29,7],[29,6],[29,3],[28,8],[28,7],[28,9],[28,8],[28,3],[8,5],[8,6],[8,3],[37,2],[37,1],[38,1],[22,2],[22,1],[39,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[47,5],[47,4],[47,3],[48,3],[48,1],[50,1],[50,2],[31,3],[31,3],[46,5],[46,2],[41,1],[41,1],[41,1],[58,8],[58,9],[58,3],[57,6],[57,7],[56,9],[56,10],[56,3],[42,1],[42,1],[42,1],[62,6],[62,7],[62,3],[63,3],[63,4],[63,3],[64,7],[64,8],[64,4],[43,2],[43,3],[44,2],[44,3],[45,3],[45,3],[32,4],[32,3],[30,3],[30,3],[72,3],[72,1],[73,3],[73,1],[34,3],[34,1],[74,2],[33,1],[33,1],[75,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,2],[80,2],[80,3],[80,3],[80,3],[80,3],[80,2],[80,2],[80,3],[80,1],[80,1],[80,1],[80,1],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,1],[55,0],[55,3],[55,3],[55,3],[55,2],[55,1],[23,1],[98,1],[98,1],[98,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$= new Nodo("INICIO","");
								this.$.addHijos($$[$0-1]);
								var NodoOb= new NodoObjeto(this.$,arreglolexico,arreglosintactico,arreglotokens);
								return NodoOb;
						
break;
case 2:
 this.$ = new Nodo("LISTACLASE","");
								this.$.addHijos($$[$0-1]);	
								this.$.addHijos($$[$0]);																			
							
break;
case 3:
   this.$ = new Nodo("LISTACLASE","");
								this.$.addHijos($$[$0]);																				
							
break;
case 4: case 5:
 this.$ = new Nodo("TIPOCLASE","");
					this.$.addHijos($$[$0]);																			
				
break;
case 6:
 this.$ = new Nodo("MAIN","");
																								
																								
break;
case 7:
 this.$ = new Nodo("MAIN","");
																												this.$.addHijos($$[$0-1]);
																								
break;
case 9:
 this.$ = new Nodo("CLASS","");
											this.$.addHijos(new Nodo($$[$0-2],"identificador"));
											
break;
case 10:
 this.$ = new Nodo("CLASS","");
											this.$.addHijos(new Nodo($$[$0-3],"identificador"));
											this.$.addHijos($$[$0-1]);
											
break;
case 12:
 this.$ = new Nodo("LISTACUERPOCLASS","");
													this.$.addHijos($$[$0-1]);
													this.$.addHijos($$[$0]);
												
break;
case 13:
 this.$ = new Nodo("LISTACUERPOCLASS","");
													this.$.addHijos($$[$0]);
												
break;
case 14: case 16: case 17: case 18:
 this.$ = new Nodo("CUERPOCLASS","");
						this.$.addHijos($$[$0]);
					
break;
case 15:
 this.$ = new Nodo("CUERPOCLASS","");
						this.$.addHijos($$[$0]);
					  
break;
case 19:
 this.$ = new Nodo("CUERPOCLASS","");
						this.$.addHijos($$[$0]);				 //---------------------Funciones
			
break;
case 20:
 this.$ = new Nodo("FUNCIONES","");
																							this.$.addHijos($$[$0-5]);
																							this.$.addHijos(new Nodo($$[$0-4],"identificador"));
																							this.$.addHijos($$[$0-2]);
																							
break;
case 21:
 this.$ = new Nodo("FUNCIONES","");
																							this.$.addHijos($$[$0-4]);
																							this.$.addHijos(new Nodo($$[$0-3],"identificador"));
																							
break;
case 23:
 this.$ = new Nodo("METODOS","1");
																							this.$.addHijos($$[$0-6]);
																							this.$.addHijos(new Nodo($$[$0-5],"identificador"));
																							this.$.addHijos($$[$0-3]);
																							
break;
case 24:
 this.$ = new Nodo("METODOS","2");
																							this.$.addHijos($$[$0-5]);
																							this.$.addHijos(new Nodo($$[$0-4],"identificador"));
																							
break;
case 25:
 this.$ = new Nodo("METODOS","3");
																													this.$.addHijos($$[$0-7]);
																													this.$.addHijos(new Nodo($$[$0-6],"identificador"));
																													this.$.addHijos($$[$0-4]);
																													this.$.addHijos($$[$0-1]);
																													
break;
case 26:
 this.$ = new Nodo("METODOS","4");
																													this.$.addHijos($$[$0-6]);
																													this.$.addHijos(new Nodo($$[$0-5],"identificador"));
																													this.$.addHijos($$[$0-1]);
																													
break;
case 28:
 this.$ = new Nodo("INTERFACE","");
													this.$.addHijos(new Nodo($$[$0-2],"identificador"));
													
break;
case 29:
 this.$ = new Nodo("INTERFACE","");
																	this.$.addHijos(new Nodo($$[$0-3],"identificador"));
																	this.$.addHijos($$[$0-1]);
																	
break;
case 31:
 this.$ = new Nodo("LISTACUERPOINTERFACE","");
																	this.$.addHijos($$[$0-1]);
																	this.$.addHijos($$[$0]);
																	
break;
case 32:
 this.$ = new Nodo("LISTACUERPOINTERFACE","");
																	this.$.addHijos($$[$0]);
																	
																	
break;
case 33:
 this.$ = new Nodo("CUERPOINTERFACE","");
							this.$.addHijos($$[$0]);
						
break;
case 34:
 this.$ = new Nodo("LISTAINSTRUCCIONES","");
													this.$.addHijos($$[$0-1]);
													this.$.addHijos($$[$0]);	
													
break;
case 35:
 this.$ = new Nodo("LISTAINSTRUCCIONES","");
													this.$.addHijos($$[$0]);
													
break;
case 36:
 this.$ = new Nodo("INSTRUCCIONES","");
							this.$.addHijos($$[$0]);	
							
break;
case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46:
 this.$ = new Nodo("SENTENCIA","");
						this.$.addHijos($$[$0]);	
						
break;
case 47:
 this.$ = new Nodo("LLAMADA","");
																 this.$.addHijos(new Nodo($$[$0-4],"identificador")); 
																 this.$.addHijos($$[$0-2]);	
																
break;
case 48:
 this.$ = new Nodo("LLAMADA","");
																 this.$.addHijos(new Nodo($$[$0-3],"identificador")); 
																 
																
break;
case 50:
	 this.$ = new Nodo("LISTAPARAMETROSVALOR","");
																 this.$.addHijos($$[$0-2]); 
																 this.$.addHijos($$[$0]); 
																
break;
case 51:
	 this.$ = new Nodo("LISTAPARAMETROSVALOR","");
																 this.$.addHijos($$[$0]); 
																
break;
case 52:
	 this.$ = new Nodo("PARAMETROSVALOR","");
																 this.$.addHijos($$[$0]); 
																
break;
case 54:
 this.$ = new Nodo("AUM_DEC","");
								this.$.addHijos(new Nodo($$[$0-2],"identificador")); 
								this.$.addHijos(new Nodo($$[$0-1],"sutraccion")); 	
								
break;
case 55:
 this.$ = new Nodo("AUM_DEC","");
								this.$.addHijos(new Nodo($$[$0-2],"identificador")); 
								this.$.addHijos(new Nodo($$[$0-1],"sustraccion")); 
								
break;
case 56:
 this.$ = new Nodo("PRINT","");
																this.$.addHijos($$[$0-2]);	
															
break;
case 58: case 59: case 60:
 this.$ = new Nodo("REPETICION","");
					this.$.addHijos($$[$0]);	
				
break;
case 61:
 this.$ = new Nodo("DOWHILE","");
																				this.$.addHijos($$[$0-2]);	
																			
break;
case 62:
 this.$ = new Nodo("DOWHILE","");
																								this.$.addHijos($$[$0-6]);
																								this.$.addHijos($$[$0-2]);	
																								
break;
case 64:
 this.$ = new Nodo("WHILE","");
																				this.$.addHijos($$[$0-3]);	
																			
break;
case 65:
 this.$ = new Nodo("WHILE","");
																				this.$.addHijos($$[$0-4]);	
																				this.$.addHijos($$[$0-1]);
																			
break;
case 66:
 this.$ = new Nodo("FOR","");
																								this.$.addHijos($$[$0-6]);
																								this.$.addHijos($$[$0-5]);
																								this.$.addHijos($$[$0-3]);
																								
break;
case 67:
 this.$ = new Nodo("FOR","");
																											this.$.addHijos($$[$0-7]);
																											this.$.addHijos($$[$0-6]);
																											this.$.addHijos($$[$0-4]);
																											this.$.addHijos($$[$0-1])
																											
break;
case 69: case 70: case 71:
 this.$ = new Nodo("CONTROL","");
								this.$.addHijos($$[$0]);
								
break;
case 72:
 this.$ = new Nodo("IF","");
																this.$.addHijos($$[$0-3]);
																
break;
case 73:
 this.$ = new Nodo("IF","");
																				this.$.addHijos($$[$0-4]);
																				this.$.addHijos($$[$0-1]);
																				
break;
case 75:
 this.$ = new Nodo("ELSE","");
											
											
break;
case 76:
 this.$ = new Nodo("ELSE","");
											this.$.addHijos($$[$0-1]);
											
break;
case 78:
 this.$ = new Nodo("ELSEIF","");
																			this.$.addHijos($$[$0-3]);
																		
break;
case 79:
 this.$ = new Nodo("ELSEIF","");
																							this.$.addHijos($$[$0-4]);
																							this.$.addHijos($$[$0-1]);
																							
break;
case 81:
 this.$ = new Nodo("BREAK","");
																//this.$.addHijos(new Nodo($$[$0-1],"break"));
																
break;
case 83:
 this.$ = new Nodo("CONTINUE","");
																//this.$.addHijos(new Nodo($$[$0-1],"continue"));
																
break;
case 85:
 this.$ = new Nodo("RETURN","");
																  this.$.addHijos($$[$0-1]);
																
break;
case 87:
 this.$ = new Nodo("ASIGNACION","");
																	this.$.addHijos(new Nodo($$[$0-3],"identificador")); 
																this.$.addHijos($$[$0-1]);
																
break;
case 89:
 this.$ = new Nodo("DEC","");
                            									this.$.addHijos($$[$0-2]);
																this.$.addHijos($$[$0-1]);
																
break;
case 91:
 this.$ = new Nodo("LISTAIDENTIFICADORES","");
                            									this.$.addHijos($$[$0-2]);
																this.$.addHijos($$[$0]);
																
break;
case 92:
 this.$ = new Nodo("LISTAIDENTIFICADORES","");
																this.$.addHijos($$[$0]);
                        										
break;
case 93:
 this.$ = new Nodo("LISTID","");
                            									this.$.addHijos(new Nodo($$[$0-2],"identificador")); 
																this.$.addHijos($$[$0]);
																
break;
case 94:
 this.$ = new Nodo("LISTID","");
                            									this.$.addHijos(new Nodo($$[$0],"identificador")); 
																
break;
case 95:
 this.$ = new Nodo("LISTAPARAMETROS","");
                            							this.$.addHijos($$[$0-2]);
														this.$.addHijos($$[$0]); 
													
break;
case 96:
 this.$ = new Nodo("LISTAPARAMETROS","");
                            							this.$.addHijos($$[$0]);
                            							
													
break;
case 97:
 this.$ = new Nodo("PARAMETROS","");
                            							this.$.addHijos($$[$0-1]);
                            							this.$.addHijos(new Nodo($$[$0],"identificador")); 
													
break;
case 98: case 99:
 this.$ = new Nodo("TIPOVOID","");
				this.$.addHijos($$[$0]);
			
break;
case 100:
 this.$ = new Nodo("VOID","");
								this.$.addHijos(new Nodo($$[$0],"void")); 	
                        	
break;
case 101:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"int")); 	
                        	
break;
case 102:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"boolean")); 	
                        	
break;
case 103:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"double")); 	
                        	
break;
case 104:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"string")); 	
                        	
break;
case 105:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"char")); 	
                        	
break;
case 107:
 this.$ = new Nodo("EXP","INICIO");
													  this.$.addHijos(new Nodo($$[$0-1],"menos")); 
                            							this.$.addHijos($$[$0]);
													
break;
case 108:
 this.$ = new Nodo("EXP","MEDIO");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"mas")); 
														this.$.addHijos($$[$0]);
													
break;
case 109:
 this.$ = new Nodo("EXP","MEDIO");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"menos")); 
														this.$.addHijos($$[$0]);
													
break;
case 110:
 this.$ = new Nodo("EXP","MEDIO");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"multiplicacion")); 
														this.$.addHijos($$[$0]);
													
break;
case 111:
 this.$ = new Nodo("EXP","MEDIO");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"division")); 
														this.$.addHijos($$[$0]);
													
break;
case 112:
 this.$ = new Nodo("EXP","FINAL");
                            							this.$.addHijos($$[$0-1]);
                            							this.$.addHijos(new Nodo($$[$0],"adicion")); 
													
break;
case 113:
 this.$ = new Nodo("EXP","FINAL");
                            							this.$.addHijos($$[$0-1]);
                            							this.$.addHijos(new Nodo($$[$0],"sustraccion")); 
													
break;
case 114:
 this.$ = new Nodo("EXP","PAREN");
														this.$.addHijos(new Nodo($$[$0-2],"parentesisA")); 
                            							this.$.addHijos($$[$0-1]); 
														this.$.addHijos(new Nodo($$[$0],"parentesisC"));
                        							
break;
case 115:
 this.$ = new Nodo("EXP","TERM");
															this.$.addHijos(new Nodo($$[$0],"entero")); 	
                        							
break;
case 116:
 this.$ = new Nodo("EXP","TERM");
															this.$.addHijos(new Nodo($$[$0],"decimal")); 	
                        							
break;
case 117:
 this.$ = new Nodo("EXP","TERM");
															this.$.addHijos(new Nodo($$[$0],"cadena")); 	
                        							
break;
case 118:
 this.$ = new Nodo("EXP","TERM");
															this.$.addHijos(new Nodo($$[$0],"identificador")); 	
                        							arreglotokens.push('Este es un token: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
													
break;
case 119: case 124:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"dobleigual")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 120:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"not igual")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 121:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"mayor")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 122:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"mayorigual")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 123:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"menor")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 125:
 this.$ = new Nodo("EXP","UNICO");
															this.$.addHijos($$[$0]); 
															
															
                        									
break;
case 127:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"and")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 128:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"or")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 129:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"xor")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 130:
 this.$ = new Nodo("EXP","INICIO");
															this.$.addHijos(new Nodo($$[$0-1],"not")); 
															this.$.addHijos($$[$0]); 
															
                        									
break;
case 131:
 this.$ = new Nodo("EXP","UNICO");
															this.$.addHijos($$[$0]); 
															
                        									
break;
case 132:
 arreglosintactico.push('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:$V0},{1:[3]},{5:[1,7],6:8,7:4,8:5,10:$V0},o($V1,[2,3]),o($V1,[2,4]),o($V1,[2,5],{23:9,2:$V2}),{2:$V2,23:12,24:[1,11],36:[1,13]},{1:[2,1]},o($V1,[2,2]),{21:[1,14]},o([19,21,35],[2,132]),{25:[1,15]},{21:[1,16]},{25:[1,17]},o($V3,[2,30]),{20:[1,18]},o($V1,[2,11]),{20:[1,19]},{2:$V2,9:27,10:$V4,15:$V5,21:[1,20],23:37,25:$V6,26:21,27:22,28:23,29:24,30:25,31:26,32:28,71:30,76:$V7,77:$V8,78:$V9,79:$Va},{10:$Vb,21:[1,38],29:41,37:39,38:40},o($V1,[2,9]),{2:$V2,9:27,10:$V4,15:$V5,21:[1,43],23:37,25:$V6,27:44,28:23,29:24,30:25,31:26,32:28,71:30,76:$V7,77:$V8,78:$V9,79:$Va},o($Vc,[2,13]),o($Vc,[2,14]),o($Vc,[2,15]),o($Vc,[2,16]),o($Vc,[2,17]),o($Vc,[2,18]),o($Vc,[2,19]),{2:$V2,11:[1,47],12:$Vd,15:$V5,23:46,33:45,71:49,75:48,76:$V7,77:$V8,78:$V9,79:$Va},{2:$V2,23:52,25:$Ve,72:51,73:53},{2:$V2,23:58,52:$Vf,53:$Vg,70:$Vh},o($Vi,[2,101]),o($Vi,[2,102]),o($Vi,[2,103]),o($Vi,[2,104]),o($Vi,[2,105]),{19:$Vj},o($V3,[2,28]),{10:$Vb,21:[1,60],29:41,38:61},o($Vk,[2,32]),o($Vk,[2,33]),{2:$V2,12:$Vd,15:$V5,23:63,33:62,71:49,75:48,76:$V7,77:$V8,78:$V9,79:$Va},o($V1,[2,10]),o($Vc,[2,12]),{25:[1,64]},{19:$Vj,21:[1,65],35:$Vl},{12:[1,67]},{25:[2,98]},{25:[2,99]},{25:[2,100]},{35:[1,68],49:[1,69]},{35:[1,70]},o($Vm,[2,92]),o($Vm,[2,94],{70:[1,71]}),{35:[1,72]},{35:[1,73]},{14:$Vn,25:$Vo,35:$Vp,51:75,55:74,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt,97:$Vu},{35:$Vv},o($Vi,[2,106]),o($V3,[2,29]),o($Vk,[2,31]),{25:[1,85]},{19:$Vj,35:$Vl},{14:[1,86]},o($Vc,[2,27]),o($Vc,[2,22]),{13:[1,87]},o($Vw,[2,89]),{25:$Ve,73:88},o($Vw,[2,90]),o($Vm,$Vp,{51:75,80:77,55:89,14:$Vn,25:$Vo,81:$Vq,85:$Vr,86:$Vs,87:$Vt,97:$Vu}),o($Vx,[2,54]),o($Vx,[2,55]),{35:[1,90]},o($Vy,[2,131],{94:[1,91],95:[1,92],96:[1,93]}),{14:$Vn,25:$Vo,51:94,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt},o($Vz,[2,125],{52:$VA,53:$VB,81:$VC,82:$VD,83:$VE,84:$VF,88:[1,95],89:[1,96],90:[1,97],91:[1,98],92:[1,99],93:[1,100]}),{14:$Vn,25:$Vo,80:107,81:$Vq,85:$Vr,86:$Vs,87:$Vt},{14:$Vn,25:$Vo,80:108,81:$Vq,85:$Vr,86:$Vs,87:$Vt},o($VG,[2,115]),o($VG,[2,116]),o($VG,[2,117]),o($VG,[2,118]),o($Vx,[2,88]),{14:[1,109]},{2:$V2,15:$V5,19:[1,111],23:37,34:110,71:113,74:112,76:$V7,77:$V8,78:$V9,79:$Va},{2:$V2,14:[1,114],23:115},o($Vm,[2,91]),o($Vm,[2,93]),o($Vx,[2,87]),{14:$Vn,25:$Vo,51:116,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt},{14:$Vn,25:$Vo,51:117,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt},{14:$Vn,25:$Vo,51:118,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt},o($Vy,[2,130]),{14:$Vn,25:$Vo,80:119,81:$Vq,85:$Vr,86:$Vs,87:$Vt},{14:$Vn,25:$Vo,80:120,81:$Vq,85:$Vr,86:$Vs,87:$Vt},{14:$Vn,25:$Vo,80:121,81:$Vq,85:$Vr,86:$Vs,87:$Vt},{14:$Vn,25:$Vo,80:122,81:$Vq,85:$Vr,86:$Vs,87:$Vt},{14:$Vn,25:$Vo,80:123,81:$Vq,85:$Vr,86:$Vs,87:$Vt},{14:$Vn,25:$Vo,80:124,81:$Vq,85:$Vr,86:$Vs,87:$Vt},{14:$Vn,25:$Vo,80:125,81:$Vq,85:$Vr,86:$Vs,87:$Vt},{14:$Vn,25:$Vo,80:126,81:$Vq,85:$Vr,86:$Vs,87:$Vt},{14:$Vn,25:$Vo,80:127,81:$Vq,85:$Vr,86:$Vs,87:$Vt},{14:$Vn,25:$Vo,80:128,81:$Vq,85:$Vr,86:$Vs,87:$Vt},o($VG,[2,112]),o($VG,[2,113]),o($VG,[2,107]),{19:[1,129],52:$VA,53:$VB,81:$VC,82:$VD,83:$VE,84:$VF},{2:$V2,15:$V5,19:[1,131],23:37,34:130,71:113,74:112,76:$V7,77:$V8,78:$V9,79:$Va},{19:[1,132],49:$VH},{20:[1,134],35:$VI},o($VJ,[2,96]),{25:[1,136]},{15:[1,137]},{21:[1,138]},o($Vy,[2,127]),o($Vy,[2,128]),o($Vy,[2,129]),o($Vz,[2,119],{52:$VA,53:$VB,81:$VC,82:$VD,83:$VE,84:$VF}),o($Vz,[2,120],{52:$VA,53:$VB,81:$VC,82:$VD,83:$VE,84:$VF}),o($Vz,[2,121],{52:$VA,53:$VB,81:$VC,82:$VD,83:$VE,84:$VF}),o($Vz,[2,122],{52:$VA,53:$VB,81:$VC,82:$VD,83:$VE,84:$VF}),o($Vz,[2,123],{52:$VA,53:$VB,81:$VC,82:$VD,83:$VE,84:$VF}),o($Vz,[2,124],{52:$VA,53:$VB,81:$VC,82:$VD,83:$VE,84:$VF}),o($VK,[2,108],{52:$VA,53:$VB,83:$VE,84:$VF}),o($VK,[2,109],{52:$VA,53:$VB,83:$VE,84:$VF}),o($VL,[2,110],{52:$VA,53:$VB}),o($VL,[2,111],{52:$VA,53:$VB}),o($VG,[2,114]),{19:[1,139],49:$VH},{35:$VI},{20:[1,140],35:$VM},{2:$V2,15:$V5,23:37,71:113,74:142,76:$V7,77:$V8,78:$V9,79:$Va},{2:$V2,15:$V5,21:[1,143],22:144,23:168,25:$VN,30:152,31:155,32:153,39:145,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},o($Vc,[2,21]),o($VJ,[2,97]),{16:[1,174]},o($Vc,[2,8]),{35:$VM},{2:$V2,15:$V5,21:[1,175],22:176,23:168,25:$VN,30:152,31:155,32:153,39:145,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},o($Vc,[2,20]),o($VJ,[2,95]),o($Vc,[2,24]),{2:$V2,15:$V5,21:[1,177],23:168,25:$VN,30:152,31:155,32:153,39:178,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},o($VX,[2,35]),o($VX,[2,36]),o($VX,[2,37]),o($VX,[2,38]),o($VX,[2,39]),o($VX,[2,40]),o($VX,[2,41]),o($VX,[2,42]),o($VX,[2,43]),o($VX,[2,44]),o($VX,[2,45]),o($VX,[2,46]),o($VX,[2,58]),o($VX,[2,59]),o($VX,[2,60]),o($VX,[2,69]),o($VX,[2,70]),o($VX,[2,71]),{2:$V2,23:180,35:[1,179]},{2:$V2,23:182,35:[1,181]},{2:$V2,14:$Vn,23:184,25:$Vo,35:$Vp,51:75,55:183,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt,97:$Vu},{2:$V2,14:[1,186],23:185,52:$Vf,53:$Vg,70:$Vh},{14:[1,187]},{19:$Vj,35:[1,188]},{2:$V2,14:[1,189],23:190},{14:[1,191]},{2:$V2,20:[1,192],23:193},{2:$V2,14:[1,194],23:195},{2:$V2,20:[1,196],23:197,65:[1,198]},{17:[1,199]},o($Vc,[2,23]),{2:$V2,15:$V5,21:[1,200],23:168,25:$VN,30:152,31:155,32:153,39:178,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},o($Vc,[2,26]),o($VX,[2,34]),o($VX,[2,81]),{35:[1,201]},o($VX,[2,83]),{35:[1,202]},{35:[1,203]},{35:[1,204]},{21:[1,205],35:$Vv},{2:$V2,14:$Vn,19:[1,207],23:210,25:$Vo,48:206,50:208,51:209,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt},{14:$Vn,19:$Vp,25:$Vo,51:75,55:211,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt,97:$Vu},o($VX,[2,57]),{2:$V2,15:$V5,23:37,30:212,71:30,76:$V7,77:$V8,78:$V9,79:$Va},{21:[1,213]},{14:$Vn,19:$Vp,25:$Vo,51:75,55:214,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt,97:$Vu},{2:$V2,15:$V5,21:[1,215],22:216,23:168,25:$VN,30:152,31:155,32:153,39:145,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},{21:[1,217]},{14:$Vn,19:$Vp,25:$Vo,51:75,55:218,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt,97:$Vu},{21:[1,219]},{2:$V2,15:$V5,21:[1,220],22:221,23:168,25:$VN,30:152,31:155,32:153,39:145,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},{21:[1,222]},{2:$V2,14:[1,223],23:224},{18:[1,225]},o($Vc,$Vi),o($VX,[2,82]),o($VX,[2,84]),o($VX,[2,85]),o($VX,[2,86]),o($VX,[2,49]),{19:[1,226],49:[1,227]},{35:[1,228]},o($VJ,[2,51]),o($VJ,[2,52]),{19:[1,229]},{19:[1,230]},{14:$Vn,25:$Vo,35:$Vp,51:75,55:231,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt,97:$Vu},o($VX,[2,68]),{19:[1,232]},{60:[1,233]},{2:$V2,15:$V5,21:[1,234],23:168,25:$VN,30:152,31:155,32:153,39:178,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},o($VX,[2,63]),{19:[1,235]},o($VX,[2,74]),o($VX,[2,75]),{2:$V2,15:$V5,21:[1,236],23:168,25:$VN,30:152,31:155,32:153,39:178,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},o($VX,[2,77]),{14:$Vn,19:$Vp,25:$Vo,51:75,55:237,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt,97:$Vu},{21:[1,238]},{19:[1,239]},{35:[1,240]},{2:$V2,14:$Vn,23:210,25:$Vo,50:241,51:209,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt},o($VX,[2,48]),o($VJ,[2,53]),{35:[1,242]},{35:[1,243]},{20:[1,244]},{14:[1,245]},{60:[1,246]},{20:[1,247]},o($VX,[2,76]),{19:[1,248]},o($VX,[2,80]),{20:[1,249]},o($VX,[2,47]),o($VJ,[2,50]),o($VX,[2,56]),{14:$Vn,19:$Vp,25:$Vo,51:75,55:250,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt,97:$Vu},{2:$V2,15:$V5,21:[1,251],22:252,23:168,25:$VN,30:152,31:155,32:153,39:145,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},{14:$Vn,19:$Vp,25:$Vo,51:75,55:253,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt,97:$Vu},{14:[1,254]},{2:$V2,15:$V5,21:[1,255],22:256,23:168,25:$VN,30:152,31:155,32:153,39:145,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},{20:[1,257]},{2:$V2,15:$V5,21:[1,258],22:259,23:168,25:$VN,30:152,31:155,32:153,39:145,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},{19:[1,260]},o($VX,[2,64]),{2:$V2,15:$V5,21:[1,261],23:168,25:$VN,30:152,31:155,32:153,39:178,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},{19:[1,262]},{14:$Vn,19:$Vp,25:$Vo,51:75,55:263,80:77,81:$Vq,85:$Vr,86:$Vs,87:$Vt,97:$Vu},o($VX,[2,72]),{2:$V2,15:$V5,21:[1,264],23:168,25:$VN,30:152,31:155,32:153,39:178,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},{2:$V2,15:$V5,21:[1,265],22:266,23:168,25:$VN,30:152,31:155,32:153,39:145,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},o($Vc,[2,6]),{2:$V2,15:$V5,21:[1,267],23:168,25:$VN,30:152,31:155,32:153,39:178,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},{20:[1,268]},o($VX,[2,65]),{35:[1,269]},{19:[1,270]},o($VX,[2,73]),o($VX,[2,78]),{2:$V2,15:$V5,21:[1,271],23:168,25:$VN,30:152,31:155,32:153,39:178,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},o($Vc,[2,7]),{2:$V2,15:$V5,21:[1,272],22:273,23:168,25:$VN,30:152,31:155,32:153,39:145,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},o($VX,[2,61]),{35:[1,274]},o($VX,[2,79]),o($VX,[2,66]),{2:$V2,15:$V5,21:[1,275],23:168,25:$VN,30:152,31:155,32:153,39:178,40:146,41:147,42:148,43:149,44:150,45:151,46:154,47:156,54:$VO,56:157,57:158,58:159,59:$VP,60:$VQ,61:$VR,62:160,63:161,64:162,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,71:30,76:$V7,77:$V8,78:$V9,79:$Va},o($VX,[2,62]),o($VX,[2,67])],
defaultActions: {7:[2,1],48:[2,98],49:[2,99],50:[2,100]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	 const Nodo = require('./NodoAST');
	 const NodoObjeto = require('./NodoObjeto');
	 var arreglolexico = [];
	 var arreglosintactico =[];
	 var arreglotokens=[];

	 //comentario actualizacion
 /* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "sustraccion";
break;
case 3: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "adicion";
break;
case 4: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 49;
break;
case 5: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 35
break;
case 6: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 14;
break;
case 7: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 19;
break;
case 8: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 20;
break;
case 9: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 21;
break;
case 10: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 16;
break;
case 11: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 17;
break;
case 12: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 88;
break;
case 13: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 91;
break;
case 14: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 93;
break;
case 15: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 90;
break;
case 16: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 92;
break;
case 17: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "notigual";
break;
case 18: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "mas";
break;
case 19: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "menos";
break;
case 20: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "por";
break;
case 21: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "dividido";
break;
case 22: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "igual";
break;
case 23: arreglotokens.push('Este es un and: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 94;
break;
case 24: arreglotokens.push('Este es un or: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 95;
break;
case 25: arreglotokens.push('Este es un not: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 97;
break;
case 26: arreglotokens.push('Este es un xor: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "xor";
break;
case 27: arreglotokens.push('Este es un void: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 12;
break;
case 28: arreglotokens.push('Este es un static: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 11;
break;
case 29: arreglotokens.push('Este es un interface: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 36;
break;
case 30: arreglotokens.push('Este es un main: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 13;
break;
case 31: arreglotokens.push('Este es un print: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 54;
break;
case 32: arreglotokens.push('Este es un print: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 54;
break;
case 33: arreglotokens.push('Este es un args: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "args";
break;
case 34: arreglotokens.push('Este es un public: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "public";
break;
case 35: arreglotokens.push('Este es un class: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "class";
break;
case 36: arreglotokens.push('Este es un for: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 61;
break;
case 37: arreglotokens.push('Este es un while: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 60;
break;
case 38: arreglotokens.push('Este es un do: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 59;
break;
case 39: arreglotokens.push('Este es un if: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 65;
break;
case 40: arreglotokens.push('Este es un else: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 66;
break;
case 41: arreglotokens.push('Este es un break: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 67;
break;
case 42: arreglotokens.push('Este es un continue: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 68;
break;
case 43: arreglotokens.push('Este es un return: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 69;
break;
case 44: arreglotokens.push('Este es un boolean: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 77;
break;
case 45: arreglotokens.push('Este es un int: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 76;
break;
case 46: arreglotokens.push('Este es un double: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 78;
break;
case 47: arreglotokens.push('Este es un String: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 15;
break;
case 48: arreglotokens.push('Este es un char: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 79;
break;
case 49:
break;
case 50:
break;
case 51:
break;
case 52: arreglotokens.push('Este es un identificador: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 25; 
break;
case 53: arreglotokens.push('Este es un decimal: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 86; 
break;
case 54: arreglotokens.push('Este es un entero: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 85; 
break;
case 55: arreglotokens.push('Este es un cadena: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 87;
break;
case 56:arreglolexico.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);  console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
case 57:return 5;
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:void\b)/i,/^(?:static\b)/i,/^(?:interface\b)/i,/^(?:main\b)/i,/^(?:System\.out\.println\b)/i,/^(?:System\.out\.print\b)/i,/^(?:args\b)/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:boolean\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:String\b)/i,/^(?:char\b)/i,/^(?:[\s]+)/i,/^(?:[\r\t]+)/i,/^(?:\n)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:"[^\"]*")/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}