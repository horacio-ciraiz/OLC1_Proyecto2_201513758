/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[5,8],$V2=[1,26],$V3=[1,32],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,33],$V9=[8,17,23,26,71,72,73,74],$Va=[1,44],$Vb=[1,45],$Vc=[1,46],$Vd=[7,67],$Ve=[2,98],$Vf=[1,62],$Vg=[1,66],$Vh=[1,61],$Vi=[1,63],$Vj=[1,64],$Vk=[1,65],$Vl=[1,59],$Vm=[8,17,23,26,47,52,53,54,58,59,60,61,62,71,72,73,74],$Vn=[7,21,67],$Vo=[7,21,67,90,91,92],$Vp=[1,86],$Vq=[1,87],$Vr=[1,83],$Vs=[1,82],$Vt=[1,84],$Vu=[1,85],$Vv=[7,21,45,46,67,76,77,78,79,84,85,86,87,88,89,90,91,92],$Vw=[21,67],$Vx=[1,135],$Vy=[1,136],$Vz=[1,139],$VA=[1,138],$VB=[1,137],$VC=[1,140],$VD=[1,141],$VE=[1,132],$VF=[1,133],$VG=[1,134],$VH=[7,21,67,76,77,84,85,86,87,88,89,90,91,92],$VI=[7,21,67,76,77,78,79,84,85,86,87,88,89,90,91,92],$VJ=[17,23,26,47,52,53,54,58,59,60,61,62,71,72,73,74];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTACLASE":4,"EOF":5,"CLASE":6,"pcoma":7,"public":8,"TIPOCLASE":9,"CLASS":10,"INTERFACE":11,"MAIN":12,"static":13,"void":14,"main":15,"parentesisA":16,"string":17,"corcheteA":18,"corcheteC":19,"args":20,"parentesisC":21,"llaveA":22,"llaveC":23,"LISTAINSTRUCCIONES":24,"class":25,"identificador":26,"LISTACUERPOCLASS":27,"CUERPOCLASS":28,"METODOS":29,"FUNCIONES":30,"DEC":31,"EXP":32,"TIPOVOID":33,"LISTAPARAMETROS":34,"interface":35,"INSTRUCCIONES":36,"SENTENCIAS":37,"REPETICION":38,"CONTROL":39,"BREAK":40,"CONTINUE":41,"RETURN":42,"ASIGNACION":43,"PRINT":44,"adicion":45,"sustraccion":46,"print":47,"EXPRESIONLOGICA":48,"FOR":49,"WHILE":50,"DOWHILE":51,"do":52,"while":53,"for":54,"IF":55,"ELSE":56,"ELSEIF":57,"if":58,"else":59,"break":60,"continue":61,"return":62,"EXPRESION":63,"igual":64,"TIPO":65,"LISTAIDENTIFICADORES":66,"coma":67,"LISTID":68,"PARAMETROS":69,"VOID":70,"int":71,"boolean":72,"double":73,"char":74,"EXPRESIONNUMERICA":75,"menos":76,"mas":77,"por":78,"dividido":79,"entero":80,"decimal":81,"cadena":82,"EXPRESIONRELACIONAL":83,"dobleigual":84,"notigual":85,"mayor":86,"mayorigual":87,"menor":88,"menorigual":89,"and":90,"or":91,"xor":92,"not":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"pcoma",8:"public",13:"static",14:"void",15:"main",16:"parentesisA",17:"string",18:"corcheteA",19:"corcheteC",20:"args",21:"parentesisC",22:"llaveA",23:"llaveC",25:"class",26:"identificador",35:"interface",45:"adicion",46:"sustraccion",47:"print",52:"do",53:"while",54:"for",58:"if",59:"else",60:"break",61:"continue",62:"return",63:"EXPRESION",64:"igual",67:"coma",71:"int",72:"boolean",73:"double",74:"char",76:"menos",77:"mas",78:"por",79:"dividido",80:"entero",81:"decimal",82:"cadena",84:"dobleigual",85:"notigual",86:"mayor",87:"mayorigual",88:"menor",89:"menorigual",90:"and",91:"or",92:"xor",93:"not"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[6,2],[9,1],[9,1],[12,12],[12,13],[10,4],[10,5],[27,2],[27,1],[28,1],[28,1],[28,1],[28,1],[28,1],[30,7],[30,6],[29,8],[29,7],[29,9],[29,8],[11,4],[24,2],[24,1],[36,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[32,3],[32,3],[44,5],[38,1],[38,1],[38,1],[51,8],[51,9],[50,6],[50,7],[49,9],[49,10],[39,1],[39,1],[39,1],[55,6],[55,7],[56,3],[56,4],[57,7],[57,8],[40,1],[41,1],[42,2],[43,4],[31,3],[66,3],[66,1],[68,3],[68,1],[34,3],[34,1],[69,2],[33,1],[33,1],[70,1],[65,1],[65,1],[65,1],[65,1],[65,1],[75,2],[75,3],[75,3],[75,3],[75,3],[75,2],[75,2],[75,3],[75,1],[75,1],[75,1],[75,1],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,1],[48,0],[48,3],[48,3],[48,3],[48,2],[48,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$= new Nodo("INICIO","");
								this.$.addHijos($$[$0-1]);
								return this.$;

						
break;
case 2:
 this.$ = new Nodo("LISTACLASE","");
								this.$.addHijos($$[$0-1]);	
								this.$.addHijos($$[$0]);																			
							
break;
case 3:
 this.$ = new Nodo("LISTACLASE","");
								this.$.addHijos($$[$0]);																				
							
break;
case 4:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 5:
 this.$ = new Nodo("CLASE","");
						this.$.addHijos($$[$0]);																			
				
break;
case 6: case 7:
 this.$ = new Nodo("TIPOCLASE","");
					this.$.addHijos($$[$0]);																			
				
break;
case 8:
 this.$ = new Nodo("MAIN","");
																								
																								
break;
case 9:
 this.$ = new Nodo("MAIN","");
																												this.$.addHijos($$[$0-1]);
																								
break;
case 10:
 this.$ = new Nodo("CLASS","");
											this.$.addHijos(new Nodo($$[$0-2],"identificador"));
											
break;
case 11:
 this.$ = new Nodo("CLASS","");
											this.$.addHijos(new Nodo($$[$0-3],"identificador"));
											this.$.addHijos($$[$0-1]);
											
break;
case 12:
 this.$ = new Nodo("LISTACUERPOCLASS","");
													this.$.addHijos($$[$0-1]);
													this.$.addHijos($$[$0]);
												
break;
case 13:
 this.$ = new Nodo("LISTACUERPOCLASS","");
													this.$.addHijos($$[$0]);
												
break;
case 14: case 16: case 17: case 18:
 this.$ = new Nodo("CUERPOCLASS","");
						this.$.addHijos($$[$0]);
					
break;
case 15:
 this.$ = new Nodo("CUERPOCLASS","");
						this.$.addHijos($$[$0]);
					  
break;
case 19:
 this.$ = new Nodo("FUNCIONES","");
																							this.$.addHijos($$[$0-5]);
																							this.$.addHijos(new Nodo($$[$0-4],"identificador"));
																							this.$.addHijos($$[$0-2]);
																							
break;
case 20:
 this.$ = new Nodo("FUNCIONES","");
																							this.$.addHijos($$[$0-4]);
																							this.$.addHijos(new Nodo($$[$0-3],"identificador"));
																							
break;
case 21:
 this.$ = new Nodo("METODOS","1");
																							this.$.addHijos($$[$0-6]);
																							this.$.addHijos(new Nodo($$[$0-5],"identificador"));
																							this.$.addHijos($$[$0-3]);
																							
break;
case 22:
 this.$ = new Nodo("METODOS","2");
																							this.$.addHijos($$[$0-5]);
																							this.$.addHijos(new Nodo($$[$0-4],"identificador"));
																							
break;
case 23:
 this.$ = new Nodo("METODOS","3");
																													this.$.addHijos($$[$0-7]);
																													this.$.addHijos(new Nodo($$[$0-6],"identificador"));
																													this.$.addHijos($$[$0-4]);
																													this.$.addHijos($$[$0-1]);
																													
break;
case 24:
 this.$ = new Nodo("METODOS","4");
																													this.$.addHijos($$[$0-6]);
																													this.$.addHijos(new Nodo($$[$0-5],"identificador"));
																													this.$.addHijos($$[$0-1]);
																													
break;
case 25:
 this.$ = new Nodo("INTERFACE","");
													this.$.addHijos(new Nodo($$[$0-2],"identificador"));
													
break;
case 26:
 this.$ = new Nodo("LISTAINSTRUCCIONES","");
													this.$.addHijos($$[$0-1]);
													this.$.addHijos($$[$0]);	
													
break;
case 27:
 this.$ = new Nodo("LISTAINSTRUCCIONES","");
													this.$.addHijos($$[$0]);
													
break;
case 28:
 this.$ = new Nodo("INSTRUCCIONES","");
						this.$.addHijos($$[$0]);	
						
break;
case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37:
 this.$ = new Nodo("SENTENCIA","");
						this.$.addHijos($$[$0]);	
						
break;
case 38:
 this.$ = new Nodo("AUMENTO","");
								this.$.addHijos(new Nodo($$[$0-2],"identificador")); 	
								
break;
case 39:
 this.$ = new Nodo("DECREMENTO","");
								this.$.addHijos(new Nodo($$[$0-2],"identificador")); 
								
break;
case 40:
 this.$ = new Nodo("PRINT","");
																this.$.addHijos($$[$0-2]);	
															
break;
case 41: case 42: case 43:
 this.$ = new Nodo("REPETICION","");
					this.$.addHijos($$[$0]);	
				
break;
case 44:
 this.$ = new Nodo("DOWHILE","");
																				this.$.addHijos($$[$0-2]);	
																			
break;
case 45:
 this.$ = new Nodo("DOWHILE","");
																								this.$.addHijos($$[$0-6]);
																								this.$.addHijos($$[$0-2]);	
																								
break;
case 46:
 this.$ = new Nodo("WHILE","");
																				this.$.addHijos($$[$0-3]);	
																			
break;
case 47:
 this.$ = new Nodo("WHILE","");
																				this.$.addHijos($$[$0-4]);	
																				this.$.addHijos($$[$0-1]);
																			
break;
case 48:
 this.$ = new Nodo("FOR","");
																								this.$.addHijos($$[$0-6]);
																								this.$.addHijos($$[$0-5]);
																								this.$.addHijos($$[$0-3]);
																								
break;
case 49:
 this.$ = new Nodo("FOR","");
																											this.$.addHijos($$[$0-7]);
																											this.$.addHijos($$[$0-6]);
																											this.$.addHijos($$[$0-4]);
																											this.$.addHijos($$[$0-1])
																											
break;
case 50: case 51: case 52:
 this.$ = new Nodo("CONTROL","");
								this.$.addHijos($$[$0]);
								
break;
case 53:
 this.$ = new Nodo("IF","");
																this.$.addHijos($$[$0-3]);
																
break;
case 54:
 this.$ = new Nodo("IF","");
																				this.$.addHijos($$[$0-4]);
																				this.$.addHijos($$[$0-1]);
																				
break;
case 55:
 this.$ = new Nodo("ELSEIF","");
											
											
break;
case 56:
 this.$ = new Nodo("ELSEIF","");
											this.$.addHijos($$[$0-1]);
											
break;
case 57:
 this.$ = new Nodo("ELSEIF","");
																			this.$.addHijos($$[$0-3]);
																		
break;
case 58:
 this.$ = new Nodo("ELSEIF","");
																							this.$.addHijos($$[$0-4]);
																							this.$.addHijos($$[$0-1]);
																							
break;
case 59:
 this.$ = new Nodo("BREAK","");
																//this.$.addHijos(new Nodo($$[$0],"break"));
																
break;
case 60:
 this.$ = new Nodo("CONTINUE","");
																//this.$.addHijos(new Nodo($$[$0],"continue"));
																
break;
case 61:
 this.$ = new Nodo("RETURN","");
																//this.$.addHijos(new Nodo($$[$0-1],"return")); 
																this.$.addHijos($$[$0]);
																
break;
case 62:
 this.$ = new Nodo("ASIGNACION","");
																	this.$.addHijos(new Nodo($$[$0-3],"identificador")); 
																this.$.addHijos($$[$0-1]);
																
break;
case 63:
 this.$ = new Nodo("DEC","");
                            									this.$.addHijos($$[$0-2]);
																this.$.addHijos($$[$0-1]);
																
break;
case 64:
 this.$ = new Nodo("LISTAIDENTIFICADORES","");
                            									this.$.addHijos($$[$0-2]);
																this.$.addHijos($$[$0]);
																
break;
case 65:
 this.$ = new Nodo("LISTAIDENTIFICADORES","");
																this.$.addHijos($$[$0]);
                        										
break;
case 66:
 this.$ = new Nodo("LISTID","");
                            									this.$.addHijos(new Nodo($$[$0-2],"identificador")); 
																this.$.addHijos($$[$0]);
																
break;
case 67:
 this.$ = new Nodo("LISTID","");
                            									this.$.addHijos(new Nodo($$[$0],"identificador")); 
																
break;
case 68:
 this.$ = new Nodo("LISTAPARAMETROS","");
                            							this.$.addHijos($$[$0-2]);
														this.$.addHijos($$[$0]); 
													
break;
case 69:
 this.$ = new Nodo("PARAMETROS","");
                            							this.$.addHijos($$[$0]);
                            							
													
break;
case 70:
 this.$ = new Nodo("PARAMETROS","");
                            							this.$.addHijos($$[$0-1]);
                            							this.$.addHijos(new Nodo($$[$0],"identificador")); 
													
break;
case 71: case 72:
 this.$ = new Nodo("TIPOVOID","");
				this.$.addHijos($$[$0]);
			
break;
case 73:
 this.$ = new Nodo("VOID","");
								this.$.addHijos(new Nodo($$[$0],"void")); 	
                        	
break;
case 74:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"int")); 	
                        	
break;
case 75:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"boolean")); 	
                        	
break;
case 76:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"double")); 	
                        	
break;
case 77:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"string")); 	
                        	
break;
case 78:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"char")); 	
                        	
break;
case 79:
 this.$ = new Nodo("EXP","");
													  this.$.addHijos(new Nodo($$[$0-1],"menos")); 
                            							this.$.addHijos($$[$0]);
													
break;
case 80:
 this.$ = new Nodo("EXP","");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"mas")); 
														this.$.addHijos($$[$0]);
													
break;
case 81:
 this.$ = new Nodo("EXP","");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"menos")); 
														this.$.addHijos($$[$0]);
													
break;
case 82:
 this.$ = new Nodo("EXP","");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"multiplicacion")); 
														this.$.addHijos($$[$0]);
													
break;
case 83:
 this.$ = new Nodo("EXP","");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"division")); 
														this.$.addHijos($$[$0]);
													
break;
case 84:
 this.$ = new Nodo("EXP","");
                            							this.$.addHijos($$[$0-1]);
                            							this.$.addHijos(new Nodo($$[$0],"adicion")); 
													
break;
case 85:
 this.$ = new Nodo("EXP","");
                            							this.$.addHijos($$[$0-1]);
                            							this.$.addHijos(new Nodo($$[$0],"sustraccion")); 
													
break;
case 86:
 this.$ = new Nodo("EXP","");
														this.$.addHijos(new Nodo($$[$0-2],"parentesisA")); 
                            							this.$.addHijos($$[$0-1]); 
														this.$.addHijos(new Nodo($$[$0],"parentesisC"));
                        							
break;
case 87:
 this.$ = new Nodo("EXP","");
															this.$.addHijos(new Nodo($$[$0],"entero")); 	
                        							
break;
case 88:
 this.$ = new Nodo("EXP","");
															this.$.addHijos(new Nodo($$[$0],"decimal")); 	
                        							
break;
case 89:
 this.$ = new Nodo("EXP","");
															this.$.addHijos(new Nodo($$[$0],"cadena")); 	
                        							
break;
case 90:
 this.$ = new Nodo("EXP","");
															this.$.addHijos(new Nodo($$[$0],"identificador")); 	
                        							
break;
case 91: case 96:
 this.$ = new Nodo("EXP","");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"dobleigual")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 92:
 this.$ = new Nodo("EXP","");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"not igual")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 93:
 this.$ = new Nodo("EXP","");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"mayor")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 94:
 this.$ = new Nodo("EXP","");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"mayorigual")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 95:
 this.$ = new Nodo("EXP","");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"menor")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 97:
 this.$ = new Nodo("EXP","");
															this.$.addHijos($$[$0]); 
															
															
                        									
break;
case 99:
 this.$ = new Nodo("EXP","");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"and")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 100:
 this.$ = new Nodo("EXP","");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"or")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 101:
 this.$ = new Nodo("EXP","");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"xor")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 102:
 this.$ = new Nodo("EXP","");
															this.$.addHijos(new Nodo($$[$0-1],"not")); 
															this.$.addHijos($$[$0]); 
															
                        									
break;
case 103:
 this.$ = new Nodo("EXP","");
															this.$.addHijos($$[$0]); 
															
                        									
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,8:$V0},{1:[3]},{5:[1,6],6:7,8:$V0},o($V1,[2,3]),{7:[1,8]},{9:9,10:10,11:11,25:[1,12],35:[1,13]},{1:[2,1]},o($V1,[2,2]),o($V1,[2,4]),o($V1,[2,5]),o($V1,[2,6]),o($V1,[2,7]),{26:[1,14]},{26:[1,15]},{22:[1,16]},{22:[1,17]},{8:$V2,12:25,17:$V3,23:[1,18],26:$V4,27:19,28:20,29:21,30:22,31:23,32:24,65:27,71:$V5,72:$V6,73:$V7,74:$V8},{23:[1,34]},o($V1,[2,10]),{8:$V2,12:25,17:$V3,23:[1,35],26:$V4,28:36,29:21,30:22,31:23,32:24,65:27,71:$V5,72:$V6,73:$V7,74:$V8},o($V9,[2,13]),o($V9,[2,14]),o($V9,[2,15]),o($V9,[2,16]),o($V9,[2,17]),o($V9,[2,18]),{13:[1,38],14:[1,41],17:$V3,33:37,65:40,70:39,71:$V5,72:$V6,73:$V7,74:$V8},{26:$Va,66:42,68:43},{45:$Vb,46:$Vc},{26:[2,74]},{26:[2,75]},{26:[2,76]},{26:[2,77]},{26:[2,78]},o($V1,[2,25]),o($V1,[2,11]),o($V9,[2,12]),{26:[1,47]},{14:[1,48]},{26:[2,71]},{26:[2,72]},{26:[2,73]},{7:[1,49],67:[1,50]},o($Vd,[2,65]),o($Vd,[2,67],{64:[1,51]}),{7:[1,52]},{7:[1,53]},{16:[1,54]},{15:[1,55]},o([7,8,16,17,23,26,47,52,53,54,58,59,60,61,62,71,72,73,74,76,80,81,82,93],[2,63]),{26:$Va,68:56},o($Vd,$Ve,{48:57,83:58,75:60,16:$Vf,26:$Vg,76:$Vh,80:$Vi,81:$Vj,82:$Vk,93:$Vl}),o($Vm,[2,38]),o($Vm,[2,39]),{17:$V3,21:[1,68],34:67,65:70,69:69,71:$V5,72:$V6,73:$V7,74:$V8},{16:[1,71]},o($Vd,[2,64]),o($Vd,[2,66]),o($Vn,[2,103],{90:[1,72],91:[1,73],92:[1,74]}),{16:$Vf,26:$Vg,75:60,76:$Vh,80:$Vi,81:$Vj,82:$Vk,83:75},o($Vo,[2,97],{45:$Vp,46:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,84:[1,76],85:[1,77],86:[1,78],87:[1,79],88:[1,80],89:[1,81]}),{16:$Vf,26:$Vg,75:88,76:$Vh,80:$Vi,81:$Vj,82:$Vk},{16:$Vf,26:$Vg,75:89,76:$Vh,80:$Vi,81:$Vj,82:$Vk},o($Vv,[2,87]),o($Vv,[2,88]),o($Vv,[2,89]),o($Vv,[2,90]),{21:[1,90],67:[1,91]},{7:[1,93],22:[1,92]},o($Vw,[2,69]),{26:[1,94]},{17:[1,95]},{16:$Vf,26:$Vg,75:60,76:$Vh,80:$Vi,81:$Vj,82:$Vk,83:96},{16:$Vf,26:$Vg,75:60,76:$Vh,80:$Vi,81:$Vj,82:$Vk,83:97},{16:$Vf,26:$Vg,75:60,76:$Vh,80:$Vi,81:$Vj,82:$Vk,83:98},o($Vn,[2,102]),{16:$Vf,26:$Vg,75:99,76:$Vh,80:$Vi,81:$Vj,82:$Vk},{16:$Vf,26:$Vg,75:100,76:$Vh,80:$Vi,81:$Vj,82:$Vk},{16:$Vf,26:$Vg,75:101,76:$Vh,80:$Vi,81:$Vj,82:$Vk},{16:$Vf,26:$Vg,75:102,76:$Vh,80:$Vi,81:$Vj,82:$Vk},{16:$Vf,26:$Vg,75:103,76:$Vh,80:$Vi,81:$Vj,82:$Vk},{16:$Vf,26:$Vg,75:104,76:$Vh,80:$Vi,81:$Vj,82:$Vk},{16:$Vf,26:$Vg,75:105,76:$Vh,80:$Vi,81:$Vj,82:$Vk},{16:$Vf,26:$Vg,75:106,76:$Vh,80:$Vi,81:$Vj,82:$Vk},{16:$Vf,26:$Vg,75:107,76:$Vh,80:$Vi,81:$Vj,82:$Vk},{16:$Vf,26:$Vg,75:108,76:$Vh,80:$Vi,81:$Vj,82:$Vk},o($Vv,[2,84]),o($Vv,[2,85]),o($Vv,[2,79]),{21:[1,109],45:$Vp,46:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu},{7:[1,111],22:[1,110]},{17:$V3,65:70,69:112,71:$V5,72:$V6,73:$V7,74:$V8},{17:$V3,23:[1,113],24:114,26:$Vx,31:122,32:125,36:115,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},o($V9,[2,20]),o($Vw,[2,70]),{18:[1,142]},o($Vn,[2,99]),o($Vn,[2,100]),o($Vn,[2,101]),o($Vo,[2,91],{45:$Vp,46:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu}),o($Vo,[2,92],{45:$Vp,46:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu}),o($Vo,[2,93],{45:$Vp,46:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu}),o($Vo,[2,94],{45:$Vp,46:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu}),o($Vo,[2,95],{45:$Vp,46:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu}),o($Vo,[2,96],{45:$Vp,46:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu}),o($VH,[2,80],{45:$Vp,46:$Vq,78:$Vt,79:$Vu}),o($VH,[2,81],{45:$Vp,46:$Vq,78:$Vt,79:$Vu}),o($VI,[2,82],{45:$Vp,46:$Vq}),o($VI,[2,83],{45:$Vp,46:$Vq}),o($Vv,[2,86]),{17:$V3,23:[1,143],24:144,26:$Vx,31:122,32:125,36:115,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},o($V9,[2,19]),o($Vw,[2,68]),o($V9,[2,22]),{17:$V3,23:[1,145],26:$Vx,31:122,32:125,36:146,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},o($VJ,[2,27]),o($VJ,[2,28]),o($VJ,[2,29]),o($VJ,[2,30]),o($VJ,[2,31]),o($VJ,[2,32]),o($VJ,[2,33]),o($VJ,[2,34]),o($VJ,[2,35]),o($VJ,[2,36]),o($VJ,[2,37]),o($VJ,[2,41]),o($VJ,[2,42]),o($VJ,[2,43]),o($VJ,[2,50]),o($VJ,[2,51]),o($VJ,[2,52]),o($VJ,[2,59]),o($VJ,[2,60]),{63:[1,147]},{45:$Vb,46:$Vc,64:[1,148]},{16:[1,149]},{16:[1,150]},{16:[1,151]},{22:[1,152]},{16:[1,153]},{22:[1,154],58:[1,155]},{19:[1,156]},o($V9,[2,21]),{17:$V3,23:[1,157],26:$Vx,31:122,32:125,36:146,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},o($V9,[2,24]),o($VJ,[2,26]),o($VJ,[2,61]),{7:$Ve,16:$Vf,26:$Vg,48:158,75:60,76:$Vh,80:$Vi,81:$Vj,82:$Vk,83:58,93:$Vl},{16:$Vf,21:$Ve,26:$Vg,48:159,75:60,76:$Vh,80:$Vi,81:$Vj,82:$Vk,83:58,93:$Vl},{17:$V3,31:160,65:27,71:$V5,72:$V6,73:$V7,74:$V8},{16:$Vf,21:$Ve,26:$Vg,48:161,75:60,76:$Vh,80:$Vi,81:$Vj,82:$Vk,83:58,93:$Vl},{17:$V3,23:[1,162],24:163,26:$Vx,31:122,32:125,36:115,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},{16:$Vf,21:$Ve,26:$Vg,48:164,75:60,76:$Vh,80:$Vi,81:$Vj,82:$Vk,83:58,93:$Vl},{17:$V3,23:[1,165],24:166,26:$Vx,31:122,32:125,36:115,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},{16:[1,167]},{20:[1,168]},o($V9,[2,23]),{7:[1,169]},{21:[1,170]},{7:$Ve,16:$Vf,26:$Vg,48:171,75:60,76:$Vh,80:$Vi,81:$Vj,82:$Vk,83:58,93:$Vl},{21:[1,172]},{53:[1,173]},{17:$V3,23:[1,174],26:$Vx,31:122,32:125,36:146,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},{21:[1,175]},o($VJ,[2,55]),{17:$V3,23:[1,176],26:$Vx,31:122,32:125,36:146,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},{16:$Vf,21:$Ve,26:$Vg,48:177,75:60,76:$Vh,80:$Vi,81:$Vj,82:$Vk,83:58,93:$Vl},{21:[1,178]},o($VJ,[2,62]),{7:[1,179]},{7:[1,180]},{22:[1,181]},{16:[1,182]},{53:[1,183]},{22:[1,184]},o($VJ,[2,56]),{21:[1,185]},{22:[1,186]},o($VJ,[2,40]),{16:$Vf,21:$Ve,26:$Vg,48:187,75:60,76:$Vh,80:$Vi,81:$Vj,82:$Vk,83:58,93:$Vl},{17:$V3,23:[1,188],24:189,26:$Vx,31:122,32:125,36:115,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},{16:$Vf,21:$Ve,26:$Vg,48:190,75:60,76:$Vh,80:$Vi,81:$Vj,82:$Vk,83:58,93:$Vl},{16:[1,191]},{17:$V3,23:[1,192],24:193,26:$Vx,31:122,32:125,36:115,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},{22:[1,194]},{17:$V3,23:[1,195],24:196,26:$Vx,31:122,32:125,36:115,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},{21:[1,197]},o($VJ,[2,46]),{17:$V3,23:[1,198],26:$Vx,31:122,32:125,36:146,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},{21:[1,199]},{16:$Vf,21:$Ve,26:$Vg,48:200,75:60,76:$Vh,80:$Vi,81:$Vj,82:$Vk,83:58,93:$Vl},o($VJ,[2,53]),{17:$V3,23:[1,201],26:$Vx,31:122,32:125,36:146,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},{17:$V3,23:[1,202],24:203,26:$Vx,31:122,32:125,36:115,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},o($V9,[2,8]),{17:$V3,23:[1,204],26:$Vx,31:122,32:125,36:146,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},{22:[1,205]},o($VJ,[2,47]),{7:[1,206]},{21:[1,207]},o($VJ,[2,54]),o($VJ,[2,57]),{17:$V3,23:[1,208],26:$Vx,31:122,32:125,36:146,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},o($V9,[2,9]),{17:$V3,23:[1,209],24:210,26:$Vx,31:122,32:125,36:115,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},o($VJ,[2,44]),{7:[1,211]},o($VJ,[2,58]),o($VJ,[2,48]),{17:$V3,23:[1,212],26:$Vx,31:122,32:125,36:146,37:116,38:117,39:118,40:119,41:120,42:121,43:123,44:124,47:$Vy,49:126,50:127,51:128,52:$Vz,53:$VA,54:$VB,55:129,56:130,57:131,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,65:27,71:$V5,72:$V6,73:$V7,74:$V8},o($VJ,[2,45]),o($VJ,[2,49])],
defaultActions: {6:[2,1],29:[2,74],30:[2,75],31:[2,76],32:[2,77],33:[2,78],39:[2,71],40:[2,72],41:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	 const Nodo = require('./NodoAST');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple l√≠nea
break;
case 1:// comentario multiple l√≠neas
break;
case 2:return "sustraccion";
break;
case 3:return "adicion";
break;
case 4:return 67;
break;
case 5:return 7;
break;
case 6:return 16;
break;
case 7:return 21;
break;
case 8:return 22;
break;
case 9:return 23;
break;
case 10:return 18;
break;
case 11:return 19;
break;
case 12:return 84;
break;
case 13:return 87;
break;
case 14:return 89;
break;
case 15:return 86;
break;
case 16:return 88;
break;
case 17:return "notigual";
break;
case 18:return "mas";
break;
case 19:return "menos";
break;
case 20:return "por";
break;
case 21:return "dividido";
break;
case 22:return "igual";
break;
case 23:return 90;
break;
case 24:return 91;
break;
case 25:return 93;
break;
case 26:return "xor";
break;
case 27:return 14;
break;
case 28:return 13;
break;
case 29:return 35
break;
case 30:return 15;
break;
case 31:return 47;
break;
case 32:return 47;
break;
case 33:return "args";
break;
case 34:return "public";
break;
case 35:return "class";
break;
case 36:return 54;
break;
case 37:return 53;
break;
case 38:return 52;
break;
case 39:return 58;
break;
case 40:return 59;
break;
case 41:return 60;
break;
case 42:return 61;
break;
case 43:return 62;
break;
case 44:return 72;
break;
case 45:return 71;
break;
case 46:return 73;
break;
case 47:return 17;
break;
case 48:return 74;
break;
case 49:
break;
case 50:
break;
case 51:
break;
case 52:return 26;
break;
case 53:return 81;
break;
case 54:return 80;
break;
case 55: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 82; 
break;
case 56:return 5;
break;
case 57: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:void\b)/i,/^(?:static\b)/i,/^(?:interface\b)/i,/^(?:main\b)/i,/^(?:System\.out\.println\b)/i,/^(?:System\.out\.print\b)/i,/^(?:args\b)/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:boolean\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:String\b)/i,/^(?:char\b)/i,/^(?:[\s]+)/i,/^(?:[\r\t]+)/i,/^(?:\n)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}