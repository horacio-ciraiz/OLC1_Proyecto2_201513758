/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[2,5,15],$V3=[1,15],$V4=[1,14],$V5=[1,13],$V6=[15,20,27,56,61,62,63,67,68,69,70,71,78,79,80,81],$V7=[1,35],$V8=[1,41],$V9=[1,37],$Va=[1,38],$Vb=[1,39],$Vc=[1,40],$Vd=[1,42],$Ve=[1,48],$Vf=[2,11,15,20,27,78,79,80,81],$Vg=[1,57],$Vh=[1,60],$Vi=[1,61],$Vj=[1,62],$Vk=[1,63],$Vl=[2,11,15],$Vm=[37,51],$Vn=[1,83],$Vo=[1,87],$Vp=[2,118],$Vq=[1,82],$Vr=[1,84],$Vs=[1,85],$Vt=[1,86],$Vu=[1,80],$Vv=[2,11,15,20,27,56,61,62,63,67,68,69,70,71,78,79,80,81],$Vw=[24,37,51],$Vx=[24,37,51,96,97,98],$Vy=[1,113],$Vz=[1,114],$VA=[1,110],$VB=[1,109],$VC=[1,111],$VD=[1,112],$VE=[24,37,51,54,55,83,84,85,86,90,91,92,93,94,95,96,97,98],$VF=[1,117],$VG=[1,146],$VH=[1,148],$VI=[24,51],$VJ=[24,37,51,83,84,90,91,92,93,94,95,96,97,98],$VK=[24,37,51,83,84,85,86,90,91,92,93,94,95,96,97,98],$VL=[1,155],$VM=[1,181],$VN=[1,182],$VO=[1,185],$VP=[1,184],$VQ=[1,183],$VR=[1,186],$VS=[1,187],$VT=[1,178],$VU=[1,179],$VV=[1,180],$VW=[2,11,20,27,56,61,62,63,67,68,69,70,71,78,79,80,81];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTACLASE":4,"EOF":5,"CLASE":6,"ERROR":7,"SIMBOLO":8,"CLASES":9,"llaveA":10,"llaveC":11,"CLASS":12,"INTERFACE":13,"MAIN":14,"public":15,"static":16,"void":17,"main":18,"parentesisA":19,"string":20,"corcheteA":21,"corcheteC":22,"args":23,"parentesisC":24,"LISTAINSTRUCCIONES":25,"class":26,"identificador":27,"LISTACUERPOCLASS":28,"CUERPOCLASS":29,"METODOS":30,"FUNCIONES":31,"DEC":32,"EXP":33,"ASIGNACION":34,"TIPOVOID":35,"LISTAPARAMETROS":36,"pcoma":37,"interface":38,"LISTACUERPOINTERFACE":39,"CUERPOINTERFACE":40,"INSTRUCCIONES":41,"SENTENCIAS":42,"REPETICION":43,"CONTROL":44,"BREAK":45,"CONTINUE":46,"RETURN":47,"PRINT":48,"LLAMADA":49,"LISTAPARAMETROSVALOR":50,"coma":51,"PARAMETROSVALOR":52,"EXPRESIONRELACIONAL":53,"adicion":54,"sustraccion":55,"print":56,"EXPRESIONLOGICA":57,"FOR":58,"WHILE":59,"DOWHILE":60,"do":61,"while":62,"for":63,"IF":64,"ELSE":65,"ELSEIF":66,"if":67,"else":68,"break":69,"continue":70,"return":71,"igual":72,"TIPO":73,"LISTAIDENTIFICADORES":74,"LISTID":75,"PARAMETROS":76,"VOID":77,"int":78,"boolean":79,"double":80,"char":81,"EXPRESIONNUMERICA":82,"menos":83,"mas":84,"por":85,"dividido":86,"entero":87,"decimal":88,"cadena":89,"dobleigual":90,"notigual":91,"mayor":92,"mayorigual":93,"menor":94,"menorigual":95,"and":96,"or":97,"xor":98,"not":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"llaveA",11:"llaveC",15:"public",16:"static",17:"void",18:"main",19:"parentesisA",20:"string",21:"corcheteA",22:"corcheteC",23:"args",24:"parentesisC",26:"class",27:"identificador",37:"pcoma",38:"interface",51:"coma",54:"adicion",55:"sustraccion",56:"print",61:"do",62:"while",63:"for",67:"if",68:"else",69:"break",70:"continue",71:"return",72:"igual",78:"int",79:"boolean",80:"double",81:"char",83:"menos",84:"mas",85:"por",86:"dividido",87:"entero",88:"decimal",89:"cadena",90:"dobleigual",91:"notigual",92:"mayor",93:"mayorigual",94:"menor",95:"menorigual",96:"and",97:"or",98:"xor",99:"not"},
productions_: [0,[3,2],[4,2],[4,1],[4,4],[4,3],[9,2],[6,1],[6,1],[14,12],[14,13],[12,5],[12,6],[28,2],[28,1],[28,4],[28,3],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[31,7],[31,6],[30,8],[30,7],[30,9],[30,8],[13,5],[13,6],[39,2],[39,1],[39,4],[39,3],[40,1],[25,2],[25,1],[25,4],[25,3],[41,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,2],[49,4],[49,3],[50,3],[50,1],[52,1],[33,3],[33,3],[48,5],[43,1],[43,1],[43,1],[60,8],[60,9],[59,6],[59,7],[58,9],[58,10],[44,1],[44,1],[44,1],[64,6],[64,7],[65,3],[65,4],[66,7],[66,8],[45,2],[46,2],[47,3],[34,4],[32,3],[74,3],[74,1],[75,3],[75,1],[36,3],[36,1],[76,2],[35,1],[35,1],[77,1],[73,1],[73,1],[73,1],[73,1],[73,1],[82,2],[82,3],[82,3],[82,3],[82,3],[82,2],[82,2],[82,3],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[53,1],[57,0],[57,3],[57,3],[57,3],[57,2],[57,1],[7,1],[8,1],[8,1],[8,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$= new Nodo("INICIO","");
								this.$.addHijos($$[$0-1]);

									var auxlex=arreglolexico;
									var auxsin=arreglosintactico;
									var auxtok=arreglotokens;
									var Nodoaux = this.$
									this.$= new Nodo("","");
									arreglolexico=[]
									arreglosintactico=[]
									arreglotokens=[]
									
								return{nodo:Nodoaux,lex:auxlex,sin:auxsin,tok:auxtok};
						
break;
case 2:
 this.$ = new Nodo("LISTACLASE","");
								this.$.addHijos($$[$0-1]);	
								this.$.addHijos($$[$0]);																			
							
break;
case 3:
   this.$ = new Nodo("LISTACLASE","");
								this.$.addHijos($$[$0]);																				
							
break;
case 4:
   this.$ = new Nodo("LISTACLASE","");
								this.$.addHijos($$[$0-3]);
								this.$.addHijos($$[$0]);
																					
							 
break;
case 5:
   this.$ = new Nodo("LISTACLASE","");
									this.$.addHijos($$[$0]);		
																										
							 
break;
case 7: case 8:
 this.$ = new Nodo("TIPOCLASE","");
					this.$.addHijos($$[$0]);																			
				
break;
case 9:
 this.$ = new Nodo("MAIN","");
																								
																								
break;
case 10:
 this.$ = new Nodo("MAIN","");
																												this.$.addHijos($$[$0-1]);
																								
break;
case 11:
 this.$ = new Nodo("CLASS","");
											this.$.addHijos(new Nodo($$[$0-2],"identificador"));
											
break;
case 12:
 this.$ = new Nodo("CLASS","");
											this.$.addHijos(new Nodo($$[$0-3],"identificador"));
											this.$.addHijos($$[$0-1]);
											
break;
case 13:
 this.$ = new Nodo("LISTACUERPOCLASS","");
													this.$.addHijos($$[$0-1]);
													this.$.addHijos($$[$0]);
												
break;
case 14:
 this.$ = new Nodo("LISTACUERPOCLASS","");
													this.$.addHijos($$[$0]);
												
break;
case 15:
   this.$ = new Nodo("LISTACUERPOCLASS","");
																this.$.addHijos($$[$0-3]);
																this.$.addHijos($$[$0]);
																
																					
												 
break;
case 16:
   this.$ = new Nodo("LISTACUERPOCLASS","");
													this.$.addHijos($$[$0]);		
																										
							 					
break;
case 17: case 19: case 20: case 21:
 this.$ = new Nodo("CUERPOCLASS","");
						this.$.addHijos($$[$0]);
					
break;
case 18:
 this.$ = new Nodo("CUERPOCLASS","");
						this.$.addHijos($$[$0]);
					  
break;
case 22:
 this.$ = new Nodo("CUERPOCLASS","");
						this.$.addHijos($$[$0]);				 //---------------------Funciones
			
break;
case 23:
 this.$ = new Nodo("FUNCIONES","");
																							this.$.addHijos($$[$0-5]);
																							this.$.addHijos(new Nodo($$[$0-4],"identificador"));
																							this.$.addHijos($$[$0-2]);
																							
break;
case 24:
 this.$ = new Nodo("FUNCIONES","");
																							this.$.addHijos($$[$0-4]);
																							this.$.addHijos(new Nodo($$[$0-3],"identificador"));
																							
break;
case 25:
 this.$ = new Nodo("METODOS","1");
																							this.$.addHijos($$[$0-6]);
																							this.$.addHijos(new Nodo($$[$0-5],"identificador"));
																							this.$.addHijos($$[$0-3]);
																							
break;
case 26:
 this.$ = new Nodo("METODOS","2");
																							this.$.addHijos($$[$0-5]);
																							this.$.addHijos(new Nodo($$[$0-4],"identificador"));
																							
break;
case 27:
 this.$ = new Nodo("METODOS","3");
																													this.$.addHijos($$[$0-7]);
																													this.$.addHijos(new Nodo($$[$0-6],"identificador"));
																													this.$.addHijos($$[$0-4]);
																													this.$.addHijos($$[$0-1]);
																													
break;
case 28:
 this.$ = new Nodo("METODOS","4");
																													this.$.addHijos($$[$0-6]);
																													this.$.addHijos(new Nodo($$[$0-5],"identificador"));
																													this.$.addHijos($$[$0-1]);
																													
break;
case 29:
 this.$ = new Nodo("INTERFACE","");
													this.$.addHijos(new Nodo($$[$0-2],"identificador"));
													
break;
case 30:
 this.$ = new Nodo("INTERFACE","");
																	this.$.addHijos(new Nodo($$[$0-3],"identificador"));
																	this.$.addHijos($$[$0-1]);
																	
break;
case 31:
 this.$ = new Nodo("LISTACUERPOINTERFACE","");
																	this.$.addHijos($$[$0-1]);
																	this.$.addHijos($$[$0]);
																	
break;
case 32:
 this.$ = new Nodo("LISTACUERPOINTERFACE","");
																	this.$.addHijos($$[$0]);
																	
																	
break;
case 33:
   this.$ = new Nodo("LISTACUERPOINTERFACE","");
																this.$.addHijos($$[$0-3]);
																this.$.addHijos($$[$0]);
																					
												 
break;
case 34:
   this.$ = new Nodo("LISTACUERPOINTERFACE","");
													this.$.addHijos($$[$0]);		
																										
							 					
break;
case 35:
 this.$ = new Nodo("CUERPOINTERFACE","");
							this.$.addHijos($$[$0]);
						
break;
case 36:
 this.$ = new Nodo("LISTAINSTRUCCIONES","");
													this.$.addHijos($$[$0-1]);
													this.$.addHijos($$[$0]);	
													
break;
case 37:
 this.$ = new Nodo("LISTAINSTRUCCIONES","");
													this.$.addHijos($$[$0]);
													
break;
case 38:
   this.$ = new Nodo("LISTAINSTRUCCIONES","");
																this.$.addHijos($$[$0-3]);
																this.$.addHijos($$[$0]);
																
																					
												 
break;
case 39:
   this.$ = new Nodo("LISTAINSTRUCCIONES","");
													this.$.addHijos($$[$0]);		
																										
							 					
break;
case 40:
 this.$ = new Nodo("INSTRUCCIONES","");
							this.$.addHijos($$[$0]);	
							
break;
case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49:
 this.$ = new Nodo("SENTENCIA","");
						this.$.addHijos($$[$0]);	
						
break;
case 50:
 this.$ = new Nodo("SENTENCIA","");
						this.$.addHijos($$[$0-1]);	
						
break;
case 51:
 this.$ = new Nodo("LLAMADA","");
																 this.$.addHijos(new Nodo($$[$0-3],"identificador")); 
																 this.$.addHijos($$[$0-1]);	
																
break;
case 52:
 this.$ = new Nodo("LLAMADA","");
																 this.$.addHijos(new Nodo($$[$0-2],"identificador")); 
																 
																
break;
case 53:
	 this.$ = new Nodo("LISTAPARAMETROSVALOR","");
																 this.$.addHijos($$[$0-2]); 
																 this.$.addHijos($$[$0]); 
																
break;
case 54:
	 this.$ = new Nodo("LISTAPARAMETROSVALOR","");
																 this.$.addHijos($$[$0]); 
																
break;
case 55:
	 this.$ = new Nodo("PARAMETROSVALOR","");
																 this.$.addHijos($$[$0]); 
																
break;
case 56:
 this.$ = new Nodo("AUM_DEC","");
								this.$.addHijos(new Nodo($$[$0-2],"identificador")); 
								this.$.addHijos(new Nodo($$[$0-1],"sutraccion")); 	
								
break;
case 57:
 this.$ = new Nodo("AUM_DEC","");
								this.$.addHijos(new Nodo($$[$0-2],"identificador")); 
								this.$.addHijos(new Nodo($$[$0-1],"sustraccion")); 
								
break;
case 58:
 this.$ = new Nodo("PRINT","");
																this.$.addHijos($$[$0-2]);	
															
break;
case 59: case 60: case 61:
 this.$ = new Nodo("REPETICION","");
					this.$.addHijos($$[$0]);	
				
break;
case 62:
 this.$ = new Nodo("DOWHILE","");
																				this.$.addHijos($$[$0-2]);	
																			
break;
case 63:
 this.$ = new Nodo("DOWHILE","");
																								this.$.addHijos($$[$0-6]);
																								this.$.addHijos($$[$0-2]);	
																								
break;
case 64:
 this.$ = new Nodo("WHILE","");
																				this.$.addHijos($$[$0-3]);	
																			
break;
case 65:
 this.$ = new Nodo("WHILE","");
																				this.$.addHijos($$[$0-4]);	
																				this.$.addHijos($$[$0-1]);
																			
break;
case 66:
 this.$ = new Nodo("FOR","");
																								this.$.addHijos($$[$0-6]);
																								this.$.addHijos($$[$0-5]);
																								this.$.addHijos($$[$0-3]);
																								
break;
case 67:
 this.$ = new Nodo("FOR","");
																											this.$.addHijos($$[$0-7]);
																											this.$.addHijos($$[$0-6]);
																											this.$.addHijos($$[$0-4]);
																											this.$.addHijos($$[$0-1])
																											
break;
case 68: case 69: case 70:
 this.$ = new Nodo("CONTROL","");
								this.$.addHijos($$[$0]);
								
break;
case 71:
 this.$ = new Nodo("IF","");
																this.$.addHijos($$[$0-3]);
																
break;
case 72:
 this.$ = new Nodo("IF","");
																				this.$.addHijos($$[$0-4]);
																				this.$.addHijos($$[$0-1]);
																				
break;
case 73:
 this.$ = new Nodo("ELSE","");
											
											
break;
case 74:
 this.$ = new Nodo("ELSE","");
											this.$.addHijos($$[$0-1]);
											
break;
case 75:
 this.$ = new Nodo("ELSEIF","");
																			this.$.addHijos($$[$0-3]);
																		
break;
case 76:
 this.$ = new Nodo("ELSEIF","");
																							this.$.addHijos($$[$0-4]);
																							this.$.addHijos($$[$0-1]);
																							
break;
case 77:
 this.$ = new Nodo("BREAK","");
																//this.$.addHijos(new Nodo($$[$0-1],"break"));
																
break;
case 78:
 this.$ = new Nodo("CONTINUE","");
																//this.$.addHijos(new Nodo($$[$0-1],"continue"));
																
break;
case 79:
 this.$ = new Nodo("RETURN","");
																  this.$.addHijos($$[$0-1]);
																
break;
case 80:
 this.$ = new Nodo("ASIGNACION","");
																	this.$.addHijos(new Nodo($$[$0-3],"identificador")); 
																this.$.addHijos($$[$0-1]);
																
break;
case 81:
 this.$ = new Nodo("DEC","");
                            									this.$.addHijos($$[$0-2]);
																this.$.addHijos($$[$0-1]);
																
break;
case 82:
 this.$ = new Nodo("LISTAIDENTIFICADORES","");
                            									this.$.addHijos($$[$0-2]);
																this.$.addHijos($$[$0]);
																
break;
case 83:
 this.$ = new Nodo("LISTAIDENTIFICADORES","");
																this.$.addHijos($$[$0]);
                        										
break;
case 84:
 this.$ = new Nodo("LISTID","");
                            									this.$.addHijos(new Nodo($$[$0-2],"identificador")); 
																this.$.addHijos($$[$0]);
																
break;
case 85:
 this.$ = new Nodo("LISTID","");
                            									this.$.addHijos(new Nodo($$[$0],"identificador")); 
																
break;
case 86:
 this.$ = new Nodo("LISTAPARAMETROS","");
                            							this.$.addHijos($$[$0-2]);
														this.$.addHijos($$[$0]); 
													
break;
case 87:
 this.$ = new Nodo("LISTAPARAMETROS","");
                            							this.$.addHijos($$[$0]);
                            							
													
break;
case 88:
 this.$ = new Nodo("PARAMETROS","");
                            							this.$.addHijos($$[$0-1]);
                            							this.$.addHijos(new Nodo($$[$0],"identificador")); 
													
break;
case 89: case 90:
 this.$ = new Nodo("TIPOVOID","");
				this.$.addHijos($$[$0]);
			
break;
case 91:
 this.$ = new Nodo("VOID","");
								this.$.addHijos(new Nodo($$[$0],"void")); 	
                        	
break;
case 92:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"int")); 	
                        	
break;
case 93:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"boolean")); 	
                        	
break;
case 94:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"double")); 	
                        	
break;
case 95:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"string")); 	
                        	
break;
case 96:
 this.$ = new Nodo("TIPO","");
								this.$.addHijos(new Nodo($$[$0],"char")); 	
                        	
break;
case 97:
 this.$ = new Nodo("EXP","INICIO");
													  this.$.addHijos(new Nodo($$[$0-1],"menos")); 
                            							this.$.addHijos($$[$0]);
													
break;
case 98:
 this.$ = new Nodo("EXP","MEDIO");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"mas")); 
														this.$.addHijos($$[$0]);
													
break;
case 99:
 this.$ = new Nodo("EXP","MEDIO");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"menos")); 
														this.$.addHijos($$[$0]);
													
break;
case 100:
 this.$ = new Nodo("EXP","MEDIO");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"multiplicacion")); 
														this.$.addHijos($$[$0]);
													
break;
case 101:
 this.$ = new Nodo("EXP","MEDIO");
                            							this.$.addHijos($$[$0-2]);
                            							this.$.addHijos(new Nodo($$[$0-1],"division")); 
														this.$.addHijos($$[$0]);
													
break;
case 102:
 this.$ = new Nodo("EXP","FINAL");
                            							this.$.addHijos($$[$0-1]);
                            							this.$.addHijos(new Nodo($$[$0],"adicion")); 
													
break;
case 103:
 this.$ = new Nodo("EXP","FINAL");
                            							this.$.addHijos($$[$0-1]);
                            							this.$.addHijos(new Nodo($$[$0],"sustraccion")); 
													
break;
case 104:
 this.$ = new Nodo("EXP","PAREN");
														this.$.addHijos(new Nodo($$[$0-2],"parentesisA")); 
                            							this.$.addHijos($$[$0-1]); 
														this.$.addHijos(new Nodo($$[$0],"parentesisC"));
                        							
break;
case 105:
 this.$ = new Nodo("EXP","TERM");
															this.$.addHijos(new Nodo($$[$0],"entero")); 	
                        							
break;
case 106:
 this.$ = new Nodo("EXP","TERM");
															this.$.addHijos(new Nodo($$[$0],"decimal")); 	
                        							
break;
case 107:
 this.$ = new Nodo("EXP","TERM");
															this.$.addHijos(new Nodo($$[$0],"cadena")); 	
                        							
break;
case 108:
 this.$ = new Nodo("EXP","TERM");
															this.$.addHijos(new Nodo($$[$0],"identificador")); 	
                        							
													
break;
case 109:
 this.$ = new Nodo("EXP",""); 	
                        								this.$.addHijos($$[$0]); 
													
break;
case 110:
 this.$ = new Nodo("EXP","UNICO");
													   this.$.addHijos($$[$0]);	
													
break;
case 111: case 116:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"dobleigual")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 112:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"not igual")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 113:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"mayor")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 114:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"mayorigual")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 115:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"menor")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 117:
 this.$ = new Nodo("EXP","UNICO");
															this.$.addHijos($$[$0]); 
															
															
                        									
break;
case 119:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"and")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 120:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"or")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 121:
 this.$ = new Nodo("EXP","MEDIO");
															this.$.addHijos($$[$0-2]); 
															this.$.addHijos(new Nodo($$[$0-1],"xor")); 
                            								this.$.addHijos($$[$0]);
															
                        									
break;
case 122:
 this.$ = new Nodo("EXP","INICIO");
															this.$.addHijos(new Nodo($$[$0-1],"not")); 
															this.$.addHijos($$[$0]); 
															
                        									
break;
case 123:
 this.$ = new Nodo("EXP","UNICO");
															this.$.addHijos($$[$0]); 
															
                        									
break;
case 124:
 arreglosintactico.push('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column + "se esperaba: "); console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,12:5,13:6,15:$V1},{1:[3]},{2:$V0,5:[1,9],6:10,7:11,12:5,13:6,15:$V1},o($V2,[2,3]),{8:12,11:$V3,24:$V4,37:$V5},o($V2,[2,7]),o($V2,[2,8]),o([11,24,37,51,54,55,83,84,85,86,90,91,92,93,94,95,96,97,98],[2,124]),{26:[1,16],38:[1,17]},{1:[2,1]},o($V2,[2,2]),{8:18,11:$V3,24:$V4,37:$V5},{6:19,12:5,13:6,15:$V1},o($V6,[2,125]),o($V6,[2,126]),o($V6,[2,127]),{27:[1,20]},{27:[1,21]},{6:22,12:5,13:6,15:$V1},o($V2,[2,5]),{10:[1,23]},{10:[1,24]},o($V2,[2,4]),{2:$V0,7:28,11:[1,25],14:33,15:$V7,20:$V8,27:$V9,28:26,29:27,30:29,31:30,32:31,33:32,34:34,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},{2:$V0,7:46,11:[1,43],15:$Ve,31:47,39:44,40:45},o($V2,[2,11]),{2:$V0,7:51,11:[1,49],14:33,15:$V7,20:$V8,27:$V9,29:50,30:29,31:30,32:31,33:32,34:34,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},o($Vf,[2,14]),{8:52,11:$V3,24:$V4,37:$V5},o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,22]),{16:[1,54],17:$Vg,20:$V8,35:53,73:56,77:55,78:$Va,79:$Vb,80:$Vc,81:$Vd},{27:$Vh,74:58,75:59},{54:$Vi,55:$Vj,72:$Vk},{27:[2,92]},{27:[2,93]},{27:[2,94]},{27:[2,95]},{27:[2,96]},o($V2,[2,29]),{2:$V0,7:66,11:[1,64],15:$Ve,31:47,40:65},o($Vl,[2,32]),{8:67,11:$V3,24:$V4,37:$V5},o($Vl,[2,35]),{17:$Vg,20:$V8,35:68,73:56,77:55,78:$Va,79:$Vb,80:$Vc,81:$Vd},o($V2,[2,12]),o($Vf,[2,13]),{8:69,11:$V3,24:$V4,37:$V5},{14:33,15:$V7,20:$V8,27:$V9,29:70,30:29,31:30,32:31,33:32,34:34,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},{27:[1,71]},{17:[1,72]},{27:[2,89]},{27:[2,90]},{27:[2,91]},{37:[1,73],51:[1,74]},o($Vm,[2,83]),o($Vm,[2,85],{72:[1,75]}),{37:[1,76]},{37:[1,77]},{2:$V0,7:88,19:$Vn,27:$Vo,37:$Vp,49:89,53:79,57:78,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt,99:$Vu},o($V2,[2,30]),o($Vl,[2,31]),{8:90,11:$V3,24:$V4,37:$V5},{15:$Ve,31:47,40:91},{27:[1,92]},{14:33,15:$V7,20:$V8,27:$V9,29:93,30:29,31:30,32:31,33:32,34:34,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},o($Vf,[2,16]),{19:[1,94]},{18:[1,95]},o([2,11,15,19,20,27,37,56,61,62,63,67,68,69,70,71,78,79,80,81,83,87,88,89,99],[2,81]),{27:$Vh,75:96},o($Vm,$Vp,{53:79,82:81,7:88,49:89,57:97,2:$V0,19:$Vn,27:$Vo,83:$Vq,87:$Vr,88:$Vs,89:$Vt,99:$Vu}),o($Vv,[2,56]),o($Vv,[2,57]),{37:[1,98]},o($Vw,[2,123],{96:[1,99],97:[1,100],98:[1,101]}),{2:$V0,7:88,19:$Vn,27:$Vo,49:89,53:102,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt},o($Vx,[2,117],{54:$Vy,55:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,90:[1,103],91:[1,104],92:[1,105],93:[1,106],94:[1,107],95:[1,108]}),{2:$V0,7:88,19:$Vn,27:$Vo,49:89,82:115,83:$Vq,87:$Vr,88:$Vs,89:$Vt},{2:$V0,7:88,19:$Vn,27:$Vo,49:89,82:116,83:$Vq,87:$Vr,88:$Vs,89:$Vt},o($VE,[2,105]),o($VE,[2,106]),o($VE,[2,107]),o($VE,[2,108],{19:$VF}),o($VE,[2,109]),o($VE,[2,110]),{15:$Ve,31:47,40:118},o($Vl,[2,34]),{19:[1,119]},o($Vf,[2,15]),{20:$V8,24:[1,121],36:120,73:123,76:122,78:$Va,79:$Vb,80:$Vc,81:$Vd},{19:[1,124]},o($Vm,[2,82]),o($Vm,[2,84]),o($Vv,[2,80]),{2:$V0,7:88,19:$Vn,27:$Vo,49:89,53:125,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt},{2:$V0,7:88,19:$Vn,27:$Vo,49:89,53:126,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt},{2:$V0,7:88,19:$Vn,27:$Vo,49:89,53:127,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt},o($Vw,[2,122]),{2:$V0,7:88,19:$Vn,27:$Vo,49:89,82:128,83:$Vq,87:$Vr,88:$Vs,89:$Vt},{2:$V0,7:88,19:$Vn,27:$Vo,49:89,82:129,83:$Vq,87:$Vr,88:$Vs,89:$Vt},{2:$V0,7:88,19:$Vn,27:$Vo,49:89,82:130,83:$Vq,87:$Vr,88:$Vs,89:$Vt},{2:$V0,7:88,19:$Vn,27:$Vo,49:89,82:131,83:$Vq,87:$Vr,88:$Vs,89:$Vt},{2:$V0,7:88,19:$Vn,27:$Vo,49:89,82:132,83:$Vq,87:$Vr,88:$Vs,89:$Vt},{2:$V0,7:88,19:$Vn,27:$Vo,49:89,82:133,83:$Vq,87:$Vr,88:$Vs,89:$Vt},{2:$V0,7:88,19:$Vn,27:$Vo,49:89,82:134,83:$Vq,87:$Vr,88:$Vs,89:$Vt},{2:$V0,7:88,19:$Vn,27:$Vo,49:89,82:135,83:$Vq,87:$Vr,88:$Vs,89:$Vt},{2:$V0,7:88,19:$Vn,27:$Vo,49:89,82:136,83:$Vq,87:$Vr,88:$Vs,89:$Vt},{2:$V0,7:88,19:$Vn,27:$Vo,49:89,82:137,83:$Vq,87:$Vr,88:$Vs,89:$Vt},o($VE,[2,102]),o($VE,[2,103]),o($VE,[2,97]),{24:[1,138],54:$Vy,55:$Vz,83:$VA,84:$VB,85:$VC,86:$VD},{2:$V0,7:88,19:$Vn,24:[1,140],27:$Vo,49:89,50:139,52:141,53:142,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt},o($Vl,[2,33]),{20:$V8,24:[1,144],36:143,73:123,76:122,78:$Va,79:$Vb,80:$Vc,81:$Vd},{24:[1,145],51:$VG},{10:[1,147],37:$VH},o($VI,[2,87]),{27:[1,149]},{20:[1,150]},o($Vw,[2,119]),o($Vw,[2,120]),o($Vw,[2,121]),o($Vx,[2,111],{54:$Vy,55:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($Vx,[2,112],{54:$Vy,55:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($Vx,[2,113],{54:$Vy,55:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($Vx,[2,114],{54:$Vy,55:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($Vx,[2,115],{54:$Vy,55:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($Vx,[2,116],{54:$Vy,55:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($VJ,[2,98],{54:$Vy,55:$Vz,85:$VC,86:$VD}),o($VJ,[2,99],{54:$Vy,55:$Vz,85:$VC,86:$VD}),o($VK,[2,100],{54:$Vy,55:$Vz}),o($VK,[2,101],{54:$Vy,55:$Vz}),o($VE,[2,104]),{24:[1,151],51:[1,152]},o($VE,[2,52]),o($VI,[2,54]),o($VI,[2,55]),{24:[1,153],51:$VG},{37:$VH},{10:[1,154],37:$VL},{20:$V8,73:123,76:156,78:$Va,79:$Vb,80:$Vc,81:$Vd},{2:$V0,7:160,11:[1,157],20:$V8,25:158,27:$VM,32:167,33:170,34:168,41:159,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},o($Vf,[2,24]),o($VI,[2,88]),{21:[1,188]},o($VE,[2,51]),{2:$V0,7:88,19:$Vn,27:$Vo,49:89,52:189,53:142,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt},{37:$VL},{2:$V0,7:160,11:[1,190],20:$V8,25:191,27:$VM,32:167,33:170,34:168,41:159,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},o($Vf,[2,23]),o($VI,[2,86]),o($Vf,[2,26]),{2:$V0,7:194,11:[1,192],20:$V8,27:$VM,32:167,33:170,34:168,41:193,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},o($VW,[2,37]),{8:195,11:$V3,24:$V4,37:$V5},o($VW,[2,40]),o($VW,[2,41]),o($VW,[2,42]),o($VW,[2,43]),o($VW,[2,44]),o($VW,[2,45]),o($VW,[2,46]),o($VW,[2,47]),o($VW,[2,48]),o($VW,[2,49]),{37:[1,196]},o($VW,[2,59]),o($VW,[2,60]),o($VW,[2,61]),o($VW,[2,68]),o($VW,[2,69]),o($VW,[2,70]),{37:[1,197]},{37:[1,198]},{2:$V0,7:88,19:$Vn,27:$Vo,37:$Vp,49:89,53:79,57:199,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt,99:$Vu},{19:$VF,54:$Vi,55:$Vj,72:$Vk},{19:[1,200]},{19:[1,201]},{19:[1,202]},{10:[1,203]},{19:[1,204]},{10:[1,205],67:[1,206]},{22:[1,207]},o($VI,[2,53]),o($Vf,[2,25]),{2:$V0,7:194,11:[1,208],20:$V8,27:$VM,32:167,33:170,34:168,41:193,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},o($Vf,[2,28]),o($VW,[2,36]),{8:209,11:$V3,24:$V4,37:$V5},{20:$V8,27:$VM,32:167,33:170,34:168,41:210,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},o($VW,[2,50]),o($VW,[2,77]),o($VW,[2,78]),{37:[1,211]},{2:$V0,7:88,19:$Vn,24:$Vp,27:$Vo,49:89,53:79,57:212,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt,99:$Vu},{20:$V8,32:213,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},{2:$V0,7:88,19:$Vn,24:$Vp,27:$Vo,49:89,53:79,57:214,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt,99:$Vu},{2:$V0,7:160,11:[1,215],20:$V8,25:216,27:$VM,32:167,33:170,34:168,41:159,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},{2:$V0,7:88,19:$Vn,24:$Vp,27:$Vo,49:89,53:79,57:217,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt,99:$Vu},{2:$V0,7:160,11:[1,218],20:$V8,25:219,27:$VM,32:167,33:170,34:168,41:159,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},{19:[1,220]},{23:[1,221]},o($Vf,[2,27]),{20:$V8,27:$VM,32:167,33:170,34:168,41:222,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},o($VW,[2,39]),o($VW,[2,79]),{24:[1,223]},{2:$V0,7:88,19:$Vn,27:$Vo,37:$Vp,49:89,53:79,57:224,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt,99:$Vu},{24:[1,225]},{62:[1,226]},{2:$V0,7:194,11:[1,227],20:$V8,27:$VM,32:167,33:170,34:168,41:193,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},{24:[1,228]},o($VW,[2,73]),{2:$V0,7:194,11:[1,229],20:$V8,27:$VM,32:167,33:170,34:168,41:193,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},{2:$V0,7:88,19:$Vn,24:$Vp,27:$Vo,49:89,53:79,57:230,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt,99:$Vu},{24:[1,231]},o($VW,[2,38]),{37:[1,232]},{37:[1,233]},{10:[1,234]},{19:[1,235]},{62:[1,236]},{10:[1,237]},o($VW,[2,74]),{24:[1,238]},{10:[1,239]},o($VW,[2,58]),{2:$V0,7:88,19:$Vn,24:$Vp,27:$Vo,49:89,53:79,57:240,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt,99:$Vu},{2:$V0,7:160,11:[1,241],20:$V8,25:242,27:$VM,32:167,33:170,34:168,41:159,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},{2:$V0,7:88,19:$Vn,24:$Vp,27:$Vo,49:89,53:79,57:243,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt,99:$Vu},{19:[1,244]},{2:$V0,7:160,11:[1,245],20:$V8,25:246,27:$VM,32:167,33:170,34:168,41:159,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},{10:[1,247]},{2:$V0,7:160,11:[1,248],20:$V8,25:249,27:$VM,32:167,33:170,34:168,41:159,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},{24:[1,250]},o($VW,[2,64]),{2:$V0,7:194,11:[1,251],20:$V8,27:$VM,32:167,33:170,34:168,41:193,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},{24:[1,252]},{2:$V0,7:88,19:$Vn,24:$Vp,27:$Vo,49:89,53:79,57:253,82:81,83:$Vq,87:$Vr,88:$Vs,89:$Vt,99:$Vu},o($VW,[2,71]),{2:$V0,7:194,11:[1,254],20:$V8,27:$VM,32:167,33:170,34:168,41:193,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},{2:$V0,7:160,11:[1,255],20:$V8,25:256,27:$VM,32:167,33:170,34:168,41:159,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},o($Vf,[2,9]),{2:$V0,7:194,11:[1,257],20:$V8,27:$VM,32:167,33:170,34:168,41:193,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},{10:[1,258]},o($VW,[2,65]),{37:[1,259]},{24:[1,260]},o($VW,[2,72]),o($VW,[2,75]),{2:$V0,7:194,11:[1,261],20:$V8,27:$VM,32:167,33:170,34:168,41:193,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},o($Vf,[2,10]),{2:$V0,7:160,11:[1,262],20:$V8,25:263,27:$VM,32:167,33:170,34:168,41:159,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},o($VW,[2,62]),{37:[1,264]},o($VW,[2,76]),o($VW,[2,66]),{2:$V0,7:194,11:[1,265],20:$V8,27:$VM,32:167,33:170,34:168,41:193,42:161,43:162,44:163,45:164,46:165,47:166,48:169,49:171,56:$VN,58:172,59:173,60:174,61:$VO,62:$VP,63:$VQ,64:175,65:176,66:177,67:$VR,68:$VS,69:$VT,70:$VU,71:$VV,73:36,78:$Va,79:$Vb,80:$Vc,81:$Vd},o($VW,[2,63]),o($VW,[2,67])],
defaultActions: {9:[2,1],38:[2,92],39:[2,93],40:[2,94],41:[2,95],42:[2,96],55:[2,89],56:[2,90],57:[2,91]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	 const Nodo = require('./NodoAST');
	 var arreglolexico = [];
	 var arreglosintactico = [];
	 var arreglotokens= [];
	 var Nodoaux = require('./NodoAST');
	var auxlex=[];
	var auxsin=[];
	var auxtok=[];

	 //comentario actualizacion
 /* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "sustraccion";
break;
case 3: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "adicion";
break;
case 4: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 51;
break;
case 5: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 37
break;
case 6: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 19;
break;
case 7: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 24;
break;
case 8: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 10;
break;
case 9: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 11;
break;
case 10: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 21;
break;
case 11: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 22;
break;
case 12: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 90;
break;
case 13: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 93;
break;
case 14: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 95;
break;
case 15: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 92;
break;
case 16: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 94;
break;
case 17: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "notigual";
break;
case 18: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "mas";
break;
case 19: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "menos";
break;
case 20: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "por";
break;
case 21: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "dividido";
break;
case 22: arreglotokens.push('Este es un igual: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "igual";
break;
case 23: arreglotokens.push('Este es un and: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 96;
break;
case 24: arreglotokens.push('Este es un or: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 97;
break;
case 25: arreglotokens.push('Este es un not: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 99;
break;
case 26: arreglotokens.push('Este es un xor: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "xor";
break;
case 27: arreglotokens.push('Este es un void: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 17;
break;
case 28: arreglotokens.push('Este es un static: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 16;
break;
case 29: arreglotokens.push('Este es un interface: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 38;
break;
case 30: arreglotokens.push('Este es un main: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 18;
break;
case 31: arreglotokens.push('Este es un print: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 56;
break;
case 32: arreglotokens.push('Este es un print: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 56;
break;
case 33: arreglotokens.push('Este es un args: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "args";
break;
case 34: arreglotokens.push('Este es un public: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "public";
break;
case 35: arreglotokens.push('Este es un class: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return "class";
break;
case 36: arreglotokens.push('Este es un for: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 63;
break;
case 37: arreglotokens.push('Este es un while: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 62;
break;
case 38: arreglotokens.push('Este es un do: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 61;
break;
case 39: arreglotokens.push('Este es un if: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 67;
break;
case 40: arreglotokens.push('Este es un else: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 68;
break;
case 41: arreglotokens.push('Este es un break: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 69;
break;
case 42: arreglotokens.push('Este es un continue: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 70;
break;
case 43: arreglotokens.push('Este es un return: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 71;
break;
case 44: arreglotokens.push('Este es un boolean: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 79;
break;
case 45: arreglotokens.push('Este es un int: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 78;
break;
case 46: arreglotokens.push('Este es un double: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 80;
break;
case 47: arreglotokens.push('Este es un String: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 20;
break;
case 48: arreglotokens.push('Este es un char: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 81;
break;
case 49:return RECUP;
break;
case 50:
break;
case 51:
break;
case 52:
break;
case 53: arreglotokens.push('Este es un identificador: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 27; 
break;
case 54: arreglotokens.push('Este es un decimal: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 88; 
break;
case 55: arreglotokens.push('Este es un entero: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); return 87; 
break;
case 56: arreglotokens.push('Este es un cadena: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 89;
break;
case 57:arreglolexico.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);  console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column + "\n"); 
break;
case 58:return 5;
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:void\b)/i,/^(?:static\b)/i,/^(?:interface\b)/i,/^(?:main\b)/i,/^(?:System\.out\.println\b)/i,/^(?:System\.out\.print\b)/i,/^(?:args\b)/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:boolean\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:String\b)/i,/^(?:char\b)/i,/^(?:\$)/i,/^(?:[\s]+)/i,/^(?:[\r\t]+)/i,/^(?:\n)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:"[^\"]*")/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}